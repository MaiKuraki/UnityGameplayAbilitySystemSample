<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YarnSpinner.Compiler</name>
    </assembly>
    <members>
        <member name="T:Yarn.Compiler.DeclarationBuilder">
            <summary>
            Provides methods for constructing <see
            cref="T:Yarn.Compiler.Declaration"/> objects.
            </summary>
            <remarks>
            To use this class, create an instance of it, and call the
            <c>With</c>-prefixed methods to set properties. When you're done, access
            the <see cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/> property to get the final, constructed
            <see cref="T:Yarn.Compiler.Declaration"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.DeclarationBuilder.Declaration">
            <summary>
            Gets the <see cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/> instance constructed by this <see
            cref="T:Yarn.Compiler.DeclarationBuilder"/>.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.Name"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="name">The name to apply to the Declaration.</param>
            <returns>The <see cref="T:Yarn.Compiler.DeclarationBuilder"/> instance that received
            this method call.</returns>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithDefaultValue(System.IConvertible)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.DefaultValue"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="defaultValue">The default value to apply to the
            Declaration.</param>
            <inheritdoc cref="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithDescription(System.String)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.Description"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="description">The description to apply to the
            Declaration.</param>
            <inheritdoc cref="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithSourceFileName(System.String)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.SourceFileName"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="sourceFileName">The source file name to apply to the
            Declaration.</param>
            <inheritdoc cref="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithSourceNodeName(System.String)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.SourceNodeName"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="sourceNodeName">The source node name to apply to the
            Declaration.</param>
            <inheritdoc cref="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithRange(Yarn.Compiler.Range)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.Range"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="range">The range to apply to the Declaration.</param>
            <inheritdoc cref="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithImplicit(System.Boolean)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.IsImplicit"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="isImplicit">The is-implicit value to apply to the
            Declaration.</param>
            <inheritdoc cref="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.DeclarationBuilder.WithType(Yarn.IType)">
            <summary>
            Sets the <see cref="P:Yarn.Compiler.Declaration.Type"/> of the <see
            cref="P:Yarn.Compiler.DeclarationBuilder.Declaration"/>.
            </summary>
            <param name="type">The type to apply to the Declaration.</param>
            <inheritdoc cref="M:Yarn.Compiler.DeclarationBuilder.WithName(System.String)" path="/returns"/>
        </member>
        <member name="T:Yarn.Compiler.FunctionTypeBuilder">
            <summary>
            Provides methods for constructing <see cref="T:Yarn.FunctionType"/>
            objects.
            </summary>
            <remarks>
            To use this class, create an instance of it, and call the
            <c>With</c>-prefixed methods to set properties. When you're done, access
            the <see cref="P:Yarn.Compiler.FunctionTypeBuilder.FunctionType"/> property to get the final, constructed
            <see cref="T:Yarn.FunctionType"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.FunctionTypeBuilder.FunctionType">
            <summary>
            Gets the <see cref="P:Yarn.Compiler.FunctionTypeBuilder.FunctionType"/> instance constructed by this
            <see cref="T:Yarn.Compiler.FunctionTypeBuilder"/>.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.FunctionTypeBuilder.WithReturnType(Yarn.IType)">
            <summary>
            Sets the <see cref="P:Yarn.FunctionType.ReturnType"/> of the <see
            cref="P:Yarn.Compiler.FunctionTypeBuilder.FunctionType"/>.
            </summary>
            <param name="returnType">The return type to apply to the
            function.</param>
            <returns>The <see cref="T:Yarn.Compiler.FunctionTypeBuilder"/> instance that
            received this method call.</returns>
        </member>
        <member name="M:Yarn.Compiler.FunctionTypeBuilder.WithParameter(Yarn.IType)">
            <summary>
            Adds a new parameter of type <paramref name="parameterType"/> to the
            <see cref="P:Yarn.Compiler.FunctionTypeBuilder.FunctionType"/>.
            </summary>
            <param name="parameterType">The type of the new parameter to add to the function.</param>
            <inheritdoc cref="M:Yarn.Compiler.FunctionTypeBuilder.WithReturnType(Yarn.IType)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.CodeGenerationVisitor.GenerateCodeForOperation(Yarn.Operator,Antlr4.Runtime.IToken,Yarn.IType,Antlr4.Runtime.ParserRuleContext[])">
            <summary>
            Emits code that calls a method appropriate for the operator
            <paramref name="op"/> on the type <paramref name="type"/>, given the operands <paramref name="operands"/>.
            </summary>
            <param name="op">The operation to perform on <paramref name="operands"/>.</param>
            <param name="operatorToken">The first token in the statement that is responsible for this operation.</param>
            <param name="type">The type of the expression.</param>
            <param name="operands">The operands to perform the operation <paramref name="op"/> on.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when there is no matching instructions for the <paramref name="op"/></exception>
        </member>
        <member name="T:Yarn.Compiler.CompilationJob">
            <summary>
            An object that contains Yarn source code to compile, and instructions on
            how to compile it.
            </summary>
            <remarks>
            Instances of this struct are used with <see
            cref="M:Yarn.Compiler.Compiler.Compile(Yarn.Compiler.CompilationJob)"/> to produce <see
            cref="T:Yarn.Compiler.CompilationResult"/> objects.
            </remarks>
        </member>
        <member name="T:Yarn.Compiler.CompilationJob.File">
            <summary>
            Represents the contents of a file to compile.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.File.FileName">
            <summary>
            The name of the file.
            </summary>
            <remarks>
            This may be a full path, or just the filename or anything in
            between. This is useful for diagnostics, and for attributing
            <see cref="T:Yarn.Line"/> objects to their original source
            files.</remarks>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.File.Source">
            <summary>
            The source code of this file.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.CompilationJob.Type">
            <summary>
            The type of compilation that the compiler will do.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.Type.FullCompilation">
            <summary>The compiler will do a full compilation, and
            generate a <see cref="T:Yarn.Program"/>, function declaration set,
            and string table.</summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.Type.DeclarationsOnly">
            <summary>The compiler will derive only the variable and
            function declarations, and file tags, found in the
            script.</summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.Type.StringsOnly">
            <summary>The compiler will generate a string table
            only.</summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.Files">
            <summary>
            The <see cref="T:Yarn.Compiler.CompilationJob.File"/> structs that represent the content to
            parse..
            </summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.Library">
            <summary>
            The <see cref="F:Yarn.Compiler.CompilationJob.Library"/> that contains declarations for
            functions.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.CompilationType">
            <summary>
            The type of compilation to perform.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.CompilationJob.VariableDeclarations">
            <summary>
            The declarations for variables.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.CompilationJob.CreateFromFiles(System.Collections.Generic.IEnumerable{System.String},Yarn.Library)">
            <summary>
            Creates a new <see cref="T:Yarn.Compiler.CompilationJob"/> using the contents of a
            collection of files.
            </summary>
            <param name="paths">The paths to the files.</param>
            <param name="library">The <see cref="F:Yarn.Compiler.CompilationJob.Library"/> containing functions
            to use for this compilation.</param>
            <returns>A new <see cref="T:Yarn.Compiler.CompilationJob"/>.</returns>
        </member>
        <member name="M:Yarn.Compiler.CompilationJob.CreateFromFiles(System.String[])">
            <inheritdoc cref="M:Yarn.Compiler.CompilationJob.CreateFromFiles(System.Collections.Generic.IEnumerable{System.String},Yarn.Library)" path="/summary"/>
            <inheritdoc cref="M:Yarn.Compiler.CompilationJob.CreateFromFiles(System.Collections.Generic.IEnumerable{System.String},Yarn.Library)" path="/param[@name='paths']"/>
            <inheritdoc cref="M:Yarn.Compiler.CompilationJob.CreateFromFiles(System.Collections.Generic.IEnumerable{System.String},Yarn.Library)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.CompilationJob.CreateFromString(System.String,System.String,Yarn.Library)">
            <summary>
            Creates a new <see cref="T:Yarn.Compiler.CompilationJob"/> using the contents
            of a string.
            </summary>
            <param name="fileName">The name to assign to the compiled
            file.</param>
            <param name="source">The text to compile.</param>
            <param name="library">Library of function definitions to use
            during compilation.</param>
            <returns>A new <see cref="T:Yarn.Compiler.CompilationJob"/>.</returns>
        </member>
        <member name="T:Yarn.Compiler.CompilationResult">
            <summary>
            The result of a compilation.
            </summary>
            <remarks>
            Instances of this struct are produced as a result of supplying a <see
            cref="T:Yarn.Compiler.CompilationJob"/> to <see
            cref="M:Yarn.Compiler.Compiler.Compile(Yarn.Compiler.CompilationJob)"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.CompilationResult.Program">
            <summary>
            Gets the compiled Yarn program that the <see cref="T:Yarn.Compiler.Compiler"/>
            produced.
            </summary>
            <remarks>
            <para>This value will be <see langword="null"/> if there were errors
            in the compilation. If this is the case, <see cref="P:Yarn.Compiler.CompilationResult.Diagnostics"/>
            will contain information describing the errors.</para>
            <para>
            It will also be <see langword="null"/> if the <see
            cref="T:Yarn.Compiler.CompilationJob"/> object's <see
            cref="F:Yarn.Compiler.CompilationJob.CompilationType"/> value was not <see
            cref="F:Yarn.Compiler.CompilationJob.Type.FullCompilation"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.CompilationResult.StringTable">
            <summary>
            Gets a dictionary mapping line IDs to StringInfo objects.
            </summary>
            <remarks>
            The string table contains the extracted line text found in the
            provided source code. The keys of this dictionary are the line IDs
            for each line - either through explicit line tags indicated through
            the <c>#line:</c> tag, or implicitly-generated line IDs that the
            compiler added during compilation.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.CompilationResult.Declarations">
            <summary>
            Gets the collection of variable declarations that were found during
            compilation.
            </summary>
            <remarks>
            This value will be <see langword="null"/> if the <see
            cref="T:Yarn.Compiler.CompilationJob"/> object's <see
            cref="F:Yarn.Compiler.CompilationJob.CompilationType"/> value was not <see
            cref="F:Yarn.Compiler.CompilationJob.Type.DeclarationsOnly"/> or <see
            cref="F:Yarn.Compiler.CompilationJob.Type.FullCompilation"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.CompilationResult.ContainsImplicitStringTags">
            <summary>
            Gets a value indicating whether the compiler had to create line IDs
            for lines in the source code that lacked <c>#line:</c> tags.
            </summary>
            <remarks>
            <para>
            Every line is required to have a line ID. If a line doesn't have a
            line ID specified in the source code (via a <c>#line:</c> tag), the
            compiler will create one.
            </para>
            <para>
            Implicit line IDs are guaranteed to remain the same between
            compilations when the source file does not change. If you want line
            IDs to remain the same when the source code may be modified in the
            future, add a <c>#line:</c> tag to the line. This may be done by
            hand, or added using the <see cref="M:Yarn.Compiler.Utility.AddTagsToLines(System.String,System.Collections.Generic.ICollection{System.String})"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.CompilationResult.FileTags">
            <summary>
            Gets the collection of file-level tags found in the source code.
            </summary>
            <remarks>The keys of this dictionary are the file names (as
            indicated by the <see cref="F:Yarn.Compiler.CompilationJob.File.FileName"/> property
            of the <see cref="T:Yarn.Compiler.CompilationJob"/>'s <see
            cref="F:Yarn.Compiler.CompilationJob.Files"/> collection), and the values are the
            file tags associated with that file.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.CompilationResult.Diagnostics">
            <summary>
            Gets the collection of <see cref="T:Yarn.Compiler.Diagnostic"/> objects that
            describe problems in the source code.
            </summary>
            <remarks>
            If the compiler encounters errors while compiling source code, the
            <see cref="T:Yarn.Compiler.CompilationResult"/> it produces will have a <see
            cref="P:Yarn.Compiler.CompilationResult.Program"/> value of <see langword="null"/>. To help figure out
            what the error is, users should consult the contents of this
            property.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.CompilationResult.DebugInfo">
            <summary>
            Gets the collection of <see cref="P:Yarn.Compiler.CompilationResult.DebugInfo"/> objects for each node
            in <see cref="P:Yarn.Compiler.CompilationResult.Program"/>.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.CompilationResult.CombineCompilationResults(System.Collections.Generic.IEnumerable{Yarn.Compiler.CompilationResult},Yarn.Compiler.StringTableManager)">
            <summary>
            Combines multiple <see cref="T:Yarn.Compiler.CompilationResult"/> objects together
            into one object.
            </summary>
            <param name="results">The compilation result objects to merge
            together.</param>
            <param name="stringTableManager">A string table builder containing
            lines from all of the compilation results in <paramref
            name="results"/>.</param>
            <returns>The combined compilation result.</returns>
        </member>
        <member name="T:Yarn.Compiler.Compiler">
            <summary>
            Compiles Yarn code.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Compiler.CurrentNode">
            <summary>
            Gets the current node to which instructions are being added.
            </summary>
            <value>The current node.</value>
        </member>
        <member name="P:Yarn.Compiler.Compiler.CurrentDebugInfo">
            <summary>
            Gets the current debug information that describes <see
            cref="P:Yarn.Compiler.Compiler.CurrentNode"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Compiler.RawTextNode">
            <summary>
            Gets or sets a value indicating whether we are currently parsing the
            current node as a 'raw text' node, or as a fully syntactic node.
            </summary>
            <value>Whether this is a raw text node or not.</value>
        </member>
        <member name="P:Yarn.Compiler.Compiler.Program">
            <summary>
            Gets the program being generated by the compiler.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Compiler.VariableDeclarations">
            <summary>
            The list of variable declarations known to the compiler.
            </summary>
            <remarks>
            This is supplied as part of a <see cref="T:Yarn.Compiler.CompilationJob"/>, or by
            <see cref="M:Yarn.Compiler.Compiler.GetDeclarations(Yarn.Compiler.FileParseResult,System.Collections.Generic.IEnumerable{Yarn.Compiler.Declaration},System.Collections.Generic.IEnumerable{Yarn.Compiler.Declaration}@,System.Collections.Generic.IEnumerable{Yarn.IType},System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{Yarn.Compiler.Diagnostic}@)"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Compiler.Library">
            <summary>
            The Library, which contains the function declarations known to the
            compiler.
            </summary>
            <remarks>
            This is supplied as part of a <see cref="T:Yarn.Compiler.CompilationJob"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Compiler.Diagnostics">
            <summary>
            Gets the list of new <see cref="T:Yarn.Compiler.Diagnostic"/> objects created during
            code generation.
            </summary>
            <remarks>
            This does not include any existing diagnostics, such as parse
            errors.
            </remarks>
        </member>
        <member name="M:Yarn.Compiler.Compiler.#ctor(Yarn.Compiler.FileParseResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.Compiler"/> class.
            </summary>
            <param name="fileParseResult">The file parse result to use.</param>
        </member>
        <member name="M:Yarn.Compiler.Compiler.Compile(Yarn.Compiler.CompilationJob)">
            <summary>
            Compiles Yarn code, as specified by a compilation job.
            </summary>
            <param name="compilationJob">The compilation job to perform.</param>
            <returns>The results of the compilation.</returns>
            <seealso cref="T:Yarn.Compiler.CompilationJob"/>
            <seealso cref="T:Yarn.Compiler.CompilationResult"/>
        </member>
        <member name="M:Yarn.Compiler.Compiler.AddErrorsForDuplicateNodeNames(System.Collections.Generic.List{Yarn.Compiler.FileParseResult},System.Collections.Generic.List{Yarn.Compiler.Diagnostic}@)">
            <summary>
            Checks every node name in <paramref name="parseResults"/>, and
            ensure that they're all unique. If there are duplicates, create
            diagnostics where any node overlaps.
            </summary>
            <param name="parseResults">A collection of file parse results to
            check.</param>
            <param name="diagnostics">A collection of diagnostics to add
            to.</param>
        </member>
        <member name="M:Yarn.Compiler.Compiler.GetDeclarationsFromLibrary(Yarn.Library)">
            <summary>
            Returns a collection of <see cref="T:Yarn.Compiler.Declaration"/> structs that
            describe the functions present in <paramref name="library"/>.
            </summary>
            <param name="library">The <see cref="P:Yarn.Compiler.Compiler.Library"/> to get declarations
            from.</param>
            <returns>The <see cref="T:Yarn.Compiler.Declaration"/> structs found.</returns>
        </member>
        <member name="M:Yarn.Compiler.Compiler.GetTokensFromFile(System.String)">
            <summary>
            Reads the contents of a text file containing source code, and
            returns a list of tokens found in that source code.
            </summary>
            <param name="path">The path of the file to load the source code
            from.</param>
            <inheritdoc cref="M:Yarn.Compiler.Compiler.GetTokensFromString(System.String)" path="/returns"/>
        </member>
        <member name="M:Yarn.Compiler.Compiler.GetTokensFromString(System.String)">
            <summary>
            Reads a string containing source code, and returns a list of
            tokens found in that source code.
            </summary>
            <param name="text">The source code to extract tokens
            from.</param>
            <returns>The list of tokens extracted from the source
            code.</returns>
        </member>
        <member name="M:Yarn.Compiler.Compiler.GetHeadersWithKey(Yarn.Compiler.YarnSpinnerParser.NodeContext,System.String)">
            <summary>
            Finds all header parse contexts in the given node with the given key.
            </summary>
            <param name="nodeContext">The node context to search.</param>
            <param name="name">The key to search for</param>
            <returns>A collection of header contexts.</returns>
        </member>
        <member name="M:Yarn.Compiler.Compiler.RegisterLabel(System.String)">
            <summary>
            Generates a unique label name to use in the program.
            </summary>
            <param name="commentary">Any additional text to append to the
            end of the label.</param>
            <returns>The new label name.</returns>
        </member>
        <member name="M:Yarn.Compiler.Compiler.Emit(Yarn.Node,Yarn.Compiler.DebugInfo,System.Int32,System.Int32,Yarn.Instruction.Types.OpCode,Yarn.Operand[])">
            <summary>
            Creates a new instruction, and appends it to a node in the <see
            cref="P:Yarn.Compiler.Compiler.Program" />.
            </summary>
            <param name="node">The node to append instructions to.</param>
            <param name="debugInfo">The <see cref="T:Yarn.Compiler.DebugInfo"/> object to add
            line debugging information to.</param>
            <param name="sourceLine">The zero-indexed line in the source input
            corresponding to this instruction.</param>
            <param name="sourceCharacter">The zero-indexed character in the
            source input corresponding to this instruction.</param>
            <param name="code">The opcode of the instruction.</param>
            <param name="operands">The operands to associate with the
            instruction.</param>
        </member>
        <member name="M:Yarn.Compiler.Compiler.Emit(Yarn.Instruction.Types.OpCode,Antlr4.Runtime.IToken,Yarn.Operand[])">
            <summary>
            Creates a new instruction, and appends it to the current node in the
            <see cref="P:Yarn.Compiler.Compiler.Program"/>.
            </summary>
            <remarks>
            Called by instances of <see
            cref="T:Yarn.Compiler.CodeGenerationVisitor"/> while walking the parse tree.
            </remarks>
            <param name="code">The opcode of the instruction.</param>
            <param name="startToken">The first token in the expression or
            statement that was responsible for emitting this
            instruction.</param>
            <param name="operands">The operands to associate with the
            instruction.</param>
        </member>
        <member name="M:Yarn.Compiler.Compiler.Emit(Yarn.Instruction.Types.OpCode,Yarn.Operand[])">
            <summary>
            Creates a new instruction, and appends it to the current node in the
            <see cref="P:Yarn.Compiler.Compiler.Program"/>.
            Differs from the other Emit call by not requiring a start token.
            This enables its use in pure synthesised elements of the Yarn.
            </summary>
            <remarks>
            Called by instances of <see
            cref="T:Yarn.Compiler.CodeGenerationVisitor"/> while walking the parse tree.
            </remarks>
            <param name="code">The opcode of the instruction.</param>
            <param name="operands">The operands to associate with the
            instruction.</param>
        </member>
        <member name="M:Yarn.Compiler.Compiler.GetLineIDTag(Yarn.Compiler.YarnSpinnerParser.HashtagContext[])">
            <summary>
            Extracts a line ID from a collection of <see
            cref="T:Yarn.Compiler.YarnSpinnerParser.HashtagContext"/>s, if one exists.
            </summary>
            <param name="hashtagContexts">The hashtag parsing
            contexts.</param>
            <returns>The line ID if one is present in the hashtag contexts,
            otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Yarn.Compiler.Compiler.EnterNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            we have found a new node set up the currentNode var ready to
            hold it and otherwise continue
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Compiler.ExitNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            have left the current node store it into the program wipe the
            var and make it ready to go again
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Yarn.Compiler.Compiler.ExitHeader(Yarn.Compiler.YarnSpinnerParser.HeaderContext)">
            <summary> 
            have finished with the header so about to enter the node body
            and all its statements do the initial setup required before
            compiling that body statements eg emit a new startlabel
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Yarn.Compiler.Compiler.EnterBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            have entered the body the header should have finished being
            parsed and currentNode ready all we do is set up a body visitor
            and tell it to run through all the statements it handles
            everything from that point onwards
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Yarn.Compiler.Compiler.GetLineIDForNodeName(System.String)">
            <summary>
            Generates a line id for a raw text node
            </summary>
            <remarks>
            This should only be used when in raw text mode.
            </remarks>
            <param name="name">The name of the node</param>
            <returns>line id for the raw text node</returns>
        </member>
        <member name="M:Yarn.Compiler.Compiler.ExitBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            Cleans up any remaining node tracking values and emits necessary instructions to support visitation and close off the node
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Yarn.Compiler.Compiler.FlattenParseTree(Antlr4.Runtime.Tree.IParseTree)">
            <summary>
            Flattens a tree of <see cref="T:Antlr4.Runtime.Tree.IParseTree"/> objects by
            recursively visiting their children, and converting them into a
            flat <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="node">The root node to begin work from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a
            flattened version of the hierarchy rooted at <paramref
            name="node"/>.</returns>
        </member>
        <member name="M:Yarn.Compiler.Compiler.GetDocumentComments(Antlr4.Runtime.CommonTokenStream,Antlr4.Runtime.ParserRuleContext,System.Boolean)">
            <summary>
            Gets the text of the documentation comments that either immediately
            precede <paramref name="context"/>, or are on the same line as
            <paramref name="context"/>.
            </summary>
            <remarks>
            Documentation comments begin with a triple-slash (<c>///</c>), and
            are used to describe variable declarations. If documentation
            comments precede a declaration (that is, they're not on the same
            line as the declaration), then they may span multiple lines, as long
            as each line begins with a triple-slash.
            </remarks>
            <param name="tokens">The token stream to search.</param>
            <param name="context">The parser rule context to get documentation
            comments for.</param>
            <param name="allowCommentsAfter">If true, this method will search
            for documentation comments that come after <paramref
            name="context"/>'s last token and are on the same line.</param>
            <returns>The text of the documentation comments.</returns>
        </member>
        <member name="T:Yarn.Compiler.ConstantValueVisitor">
            <summary>
            A visitor that visits any valid constant value, and returns a <see
            cref="T:Yarn.Value"/>. Currently only supports terminals, not expressions,
            even if those expressions would be constant.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.ConstantValueVisitor.#ctor(Antlr4.Runtime.ParserRuleContext,System.String,System.Collections.Generic.IEnumerable{Yarn.IType},System.Collections.Generic.List{Yarn.Compiler.Diagnostic}@)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Yarn.Compiler.ConstantValueVisitor"/> class.
            </summary>
            <param name="context">The parser context for this value.</param>
            <param name="sourceFileName">The name of the file that is being
            visited by this instance.</param>
            <param name="types">The types of values known to this instance.</param>
            <param name="diagnostics">The global list of existing diagnostic</param>
        </member>
        <member name="T:Yarn.Compiler.DebugInfo">
            <summary>
            Contains debug information for a node in a Yarn file.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DebugInfo.FileName">
            <summary>
            Gets or sets the file that this DebugInfo was produced from.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DebugInfo.NodeName">
            <summary>
            Gets or sets the node that this DebugInfo was produced from.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DebugInfo.LineInfos">
            <summary>
            Gets or sets the mapping of instruction numbers to line and
            character information in the file indicated by <see
            cref="P:Yarn.Compiler.DebugInfo.FileName"/>.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.DebugInfo.GetLineInfo(System.Int32)">
            <summary>
            Gets a <see cref="T:Yarn.Compiler.DebugInfo.LineInfo"/> object that describes the specified
            instruction at the index <paramref name="instructionNumber"/>.
            </summary>
            <param name="instructionNumber">The index of the instruction to
            retrieve information for.</param>
            <returns>A <see cref="T:Yarn.Compiler.DebugInfo.LineInfo"/> object that describes the position
            of the instruction.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref
            name="instructionNumber"/> is less than zero, or greater than the
            number of instructions present in the node.</exception>
        </member>
        <member name="T:Yarn.Compiler.DebugInfo.LineInfo">
            <summary>
            Contains positional information about an instruction.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DebugInfo.LineInfo.FileName">
            <summary>
            The file name of the source that this intruction was produced
            from.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DebugInfo.LineInfo.NodeName">
            <summary>
            The node name of the source that this intruction was produced
            from.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DebugInfo.LineInfo.LineNumber">
            <summary>
            The zero-indexed line number in <see cref="F:Yarn.Compiler.DebugInfo.LineInfo.FileName"/> that
            contains the statement or expression that this line was produced
            from.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DebugInfo.LineInfo.CharacterNumber">
            <summary>
            The zero-indexed character number in <see cref="F:Yarn.Compiler.DebugInfo.LineInfo.FileName"/> that
            contains the statement or expression that this line was produced
            from.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.Range">
            <summary>
            Represents a range of text in a multi-line string.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.Range"/> class, given
            start and end information.
            </summary>
            <param name="startLine">The zero-indexed line number of the start of
            the range.</param>
            <param name="startCharacter">The zero-indexed character number of
            the start of the range.</param>
            <param name="endLine">The zero-indexed line number of the end of the
            range.</param>
            <param name="endCharacter">The zero-indexed character number of the
            end of the range.</param>
        </member>
        <member name="M:Yarn.Compiler.Range.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.Range"/> class.
            </summary>
            <remarks>
            The <see cref="P:Yarn.Compiler.Range.Start"/> and <see cref="P:Yarn.Compiler.Range.End"/> positions will both be
            set to have a line and character index of -1.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Range.Start">
            <summary>
            Gets or sets the start position of this range.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Range.End">
            <summary>
            Gets or sets the end position of this range.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Range.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Range.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Yarn.Compiler.Position">
            <summary>
            Represents a position in a multi-line string.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Position.Line">
            <summary>
            Gets or sets the zero-indexed line of this position.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Position.Character">
            <summary>
            Gets or sets the zero-indexed character number of this position.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Position.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Position.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Yarn.Compiler.DeferredTypeDiagnostic">
            <summary>
            Represents a potential type error diagnostic message.
            </summary>
            <remarks>
            Because a variable can be declared in a scope different from the current yarn file, or even externally, when we first hit upon any variables of which we don't know the type of we create a deferred diagnostic.
            The idea being that we are hoping another file or step will give the information needed to resolved the type.
            Later once the compiler has finished parsing every file we can see if any of these weren't resolved.
            If they were not they will be promoted into a full diagnostic and presented to the user.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.DeferredTypeDiagnostic.Name">
            <summary>
            The name of the variable who's type error is being deferred
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DeferredTypeDiagnostic.diagnostic">
            <summary>
            The <see cref="T:Yarn.Compiler.Diagnostic"/> that has been deferred.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.DeferredTypeDiagnostic.CreateDeferredTypeDiagnostic(System.String,Yarn.Compiler.Diagnostic)">
            <summary>
            Convenience method for constructing new deferred type diagnostics
            </summary>
            <param name="name">The name of the variable</param>
            <param name="diagnostic">The diagnostic that has been deferred</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Yarn.Compiler.Declaration">
            <summary>
            Represents a variable declaration
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Declaration.Name">
            <summary>
            Gets the name of this Declaration.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Declaration.CreateVariable(System.String,Yarn.IType,System.IConvertible,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Yarn.Compiler.Declaration"/> class,
            using the given name, type and default value.
            </summary>
            <param name="name">The name of the new declaration.</param>
            <param name="type">The type of the declaration.</param>
            <param name="defaultValue">The default value of the
            declaration. This must be a string, a number (integer or
            floating-point), or boolean value.</param>
            <param name="description">The description of the new
            declaration.</param>
            <returns>A new instance of the <see cref="T:Yarn.Compiler.Declaration"/>
            class.</returns>
        </member>
        <member name="P:Yarn.Compiler.Declaration.DefaultValue">
            <summary>
            Gets the default value of this <see cref="T:Yarn.Compiler.Declaration"/>, if no
            value has been specified in code or is available from a <see
            cref="T:Yarn.Dialogue"/>'s <see cref="T:Yarn.IVariableStorage"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Declaration.Description">
            <summary>
            Gets a string describing the purpose of this <see
            cref="T:Yarn.Compiler.Declaration"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Declaration.SourceFileName">
            <summary>
            Gets the name of the file in which this Declaration was found.
            </summary>
            <remarks>
            If this <see cref="T:Yarn.Compiler.Declaration"/> was not found in a Yarn
            source file, this will be <see cref="F:Yarn.Compiler.Declaration.ExternalDeclaration"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Declaration.SourceNodeName">
            <summary>
            Gets the name of the node in which this Declaration was found.
            </summary>
            <remarks>
            If this <see cref="T:Yarn.Compiler.Declaration"/> was not found in a Yarn
            source file, this will be <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Declaration.SourceFileLine">
            <summary>
            Gets the line number at which this Declaration was found in the
            source file.
            </summary>
            <remarks>
            If this <see cref="T:Yarn.Compiler.Declaration"/> was not found in a Yarn
            source file, this will be -1.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Declaration.IsImplicit">
            <summary>
            Gets a value indicating whether get or sets a value indicating
            whether this Declaration was implicitly inferred from usage.
            </summary>
            <value>If <see langword="true"/>, this Declaration was implicitly
            inferred from usage. If <see langword="false"/>, this Declaration
            appears in the source code.</value>
        </member>
        <member name="P:Yarn.Compiler.Declaration.Type">
            <summary>
            Gets the type of the variable, as represented by an object that
            implements <see cref="T:Yarn.IType"/>.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Declaration.ExternalDeclaration">
            <summary>
            The string used for <see cref="P:Yarn.Compiler.Declaration.SourceFileName"/> if the
            Declaration was found outside of a Yarn source file.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Declaration.Range">
            <summary>
            Gets the range of text at which this declaration occurs.
            </summary>
            <remarks>
            This range refers to the declaration of the symbol itself, and not
            any syntax surrounding it. For example, the declaration
            <c>&lt;&lt;declare $x = 1&gt;&gt;</c> would have a Range referring
            to the <c>$x</c> symbol.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Declaration.IsVariable">
            <summary>
            Gets a value indicating whether this Declaration represents a
            variable.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Declaration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Declaration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Declaration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Yarn.Compiler.DeclarationVisitor">
            <summary>
            A visitor that extracts variable declarations from a parse tree.
            /// After visiting an entire parse tree for a file, the <see
            cref="P:Yarn.Compiler.DeclarationVisitor.NewDeclarations"/> property will contain all explicit
            variable declarations that were found.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DeclarationVisitor.tokens">
            <summary>
            The CommonTokenStream derived from the file we're parsing. This
            is used to find documentation comments for declarations.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DeclarationVisitor.currentNodeContext">
            <summary>
            The context of the node we're currently in.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DeclarationVisitor.sourceFileName">
            <summary>
            The name of the file we're currently in.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DeclarationVisitor.Types">
            <summary>
            Gets the collection of types known to this <see
            cref="T:Yarn.Compiler.DeclarationVisitor"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DeclarationVisitor.NewDeclarations">
            <summary>
            Gets the collection of new variable declarations that were
            found as a result of using this <see
            cref="T:Yarn.Compiler.DeclarationVisitor"/> to visit a <see
            cref="T:Antlr4.Runtime.ParserRuleContext"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DeclarationVisitor.FileTags">
            <summary>
            Gets the collection of file-level hashtags that were found as a
            result of using this <see cref="T:Yarn.Compiler.DeclarationVisitor"/> to visit
            a <see cref="T:Antlr4.Runtime.ParserRuleContext"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.DeclarationVisitor.Declarations">
            <summary>
            The collection of all declarations - both the ones we received
            at the start, and the new ones we've derived ourselves.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.DeclarationVisitor.regex">
            <summary>A regular expression used to detect illegal characters
            in node titles.</summary>
        </member>
        <member name="T:Yarn.Compiler.Diagnostic">
            <summary>
            A diagnostic message that describes an error, warning or informational
            message that the user can take action on.
            </summary>
            <remarks>
            Diagnostics are presented to the user as the result of compilation,
            through the <see cref="T:Yarn.Compiler.CompilationResult"/> class's <see
            cref="P:Yarn.Compiler.CompilationResult.Diagnostics"/> property.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Diagnostic.FileName">
            <summary>
            Gets or sets the path, URI or file-name that the issue occurred in.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Diagnostic.Range">
            <summary>
            Gets or sets the range of the file indicated by <see
            cref="P:Yarn.Compiler.Diagnostic.FileName"/> that the issue occurred in.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Diagnostic.Message">
            <summary>
            Gets or sets the description of the issue.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Diagnostic.Context">
            <summary>
            Gets or sets the source text of <see cref="P:Yarn.Compiler.Diagnostic.FileName"/> containing
            the issue.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Diagnostic.Severity">
            <summary>
            Gets or sets the severity of the issue.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Diagnostic.Line">
            <summary>
            Gets the zero-indexed line number in FileName at which the issue
            begins.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Diagnostic.Column">
            <summary>
            Gets the zero-indexed character number in FileName at which the
            issue begins.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Diagnostic.#ctor(System.String,System.String,Yarn.Compiler.Diagnostic.DiagnosticSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.Diagnostic"/> class.
            </summary>
            <param name="fileName"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.FileName"
            path="/summary/node()"/></param>
            <param name="message"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Message"
            path="/summary/node()"/></param>
            <param name="severity"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Severity"
            path="/summary/node()"/></param>
        </member>
        <member name="M:Yarn.Compiler.Diagnostic.#ctor(System.String,Yarn.Compiler.Diagnostic.DiagnosticSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.Diagnostic"/> class.
            </summary>
            <param name="message"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Message"
            path="/summary/node()"/></param>
            <param name="severity"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Severity"
            path="/summary/node()"/></param>
        </member>
        <member name="M:Yarn.Compiler.Diagnostic.#ctor(System.String,Antlr4.Runtime.ParserRuleContext,System.String,Yarn.Compiler.Diagnostic.DiagnosticSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.Diagnostic"/> class.
            </summary>
            <param name="fileName"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.FileName"
            path="/summary/node()"/></param>
            <param name="context">The parse node at which the error
            occurred.</param>
            <param name="message"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Message"
            path="/summary/node()"/></param>
            <param name="severity"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Severity"
            path="/summary/node()"/></param>
        </member>
        <member name="M:Yarn.Compiler.Diagnostic.#ctor(System.String,Yarn.Compiler.Range,System.String,Yarn.Compiler.Diagnostic.DiagnosticSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.Diagnostic"/> class.
            </summary>
            <param name="fileName"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.FileName"
            path="/summary/node()"/></param>
            <param name="range"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Range"
            path="/summary/node()"/></param>
            <param name="message"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Message"
            path="/summary/node()"/></param>
            <param name="severity"><inheritdoc cref="P:Yarn.Compiler.Diagnostic.Severity"
            path="/summary/node()"/></param>
        </member>
        <member name="T:Yarn.Compiler.Diagnostic.DiagnosticSeverity">
            <summary>
            The severity of the issue.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Diagnostic.DiagnosticSeverity.Error">
            <summary>
            An error.
            </summary>
            <remarks>
            If a Yarn source file contains errors, it cannot be compiled,
            and the compilation process will fail.
            </remarks>
        </member>
        <member name="F:Yarn.Compiler.Diagnostic.DiagnosticSeverity.Warning">
            <summary>
            An warning.
            </summary>
            <remarks>
            Warnings represent possible problems that the user should fix,
            but do not cause the compilation process to fail.
            </remarks>
        </member>
        <member name="F:Yarn.Compiler.Diagnostic.DiagnosticSeverity.Info">
            <summary>
            An informational diagnostic.
            </summary>
            <remarks>
            Infos represent possible issues or steps that the user may wish
            to fix, but are unlikely to cause problems.
            </remarks>
        </member>
        <member name="M:Yarn.Compiler.Diagnostic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Diagnostic.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Diagnostic.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Yarn.Compiler.FileParseResult">
            <summary>
            Contains the result of parsing a single file of source code.
            </summary>
            <remarks>
            This class provides only syntactic information about a parse - that is,
            it provides access to the parse tree, and the stream of tokens used to
            produce that parse tree.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.FileParseResult.Name">
            <summary>
            <inheritdoc cref="M:Yarn.Compiler.FileParseResult.#ctor(System.String,Antlr4.Runtime.Tree.IParseTree,Antlr4.Runtime.CommonTokenStream)" path="/param[@name='name']"/>
            </summary>
        </member>
        <member name="P:Yarn.Compiler.FileParseResult.Tree">
            <summary>
            <inheritdoc cref="M:Yarn.Compiler.FileParseResult.#ctor(System.String,Antlr4.Runtime.Tree.IParseTree,Antlr4.Runtime.CommonTokenStream)" path="/param[@name='tree']"/>
            </summary>
        </member>
        <member name="P:Yarn.Compiler.FileParseResult.Tokens">
            <summary>
            <inheritdoc cref="M:Yarn.Compiler.FileParseResult.#ctor(System.String,Antlr4.Runtime.Tree.IParseTree,Antlr4.Runtime.CommonTokenStream)" path="/param[@name='tokens']"/>
            </summary>
        </member>
        <member name="M:Yarn.Compiler.FileParseResult.#ctor(System.String,Antlr4.Runtime.Tree.IParseTree,Antlr4.Runtime.CommonTokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.FileParseResult"/>
            struct.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="tree">The parse tree extracted from the file.</param>
            <param name="tokens">The tokens extracted from the file.</param>
        </member>
        <member name="M:Yarn.Compiler.FileParseResult.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.FileParseResult.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Yarn.Compiler.IndentAwareLexer">
            <summary>
            A Lexer subclass that detects newlines and generates indent and
            dedent tokens accordingly.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.unbalancedIndents">
            <summary>
            A stack keeping track of the levels of indentations we have
            seen so far that are relevant to shortcuts.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.lastIndent">
            <summary>
            Keeps track of the last indentation encounterd.
            This is used to see if depth has changed between lines.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.lineContainsShortcut">
            <summary>
            A flag to say the last line observed was a shortcut or not.
            Used to determine if tracking indents needs to occur.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.lastToken">
            <summary>
            Holds the last observed token from the stream.
            Used to see if a line is blank or not.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.lastSeenOptionContent">
            <summary>
            holds the line number of the last seen option.
            Lets us work out if the blank line needs to end the option.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.pendingTokens">
            <summary>
            The collection of tokens that we have seen, but have not yet
            returned. This is needed when NextToken encounters a newline,
            which means we need to buffer indents or dedents. NextToken
            only returns a single <see cref="T:Antlr4.Runtime.IToken"/> at a time, which
            means we use this list to buffer it.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.warnings">
            <summary>
            The collection of <see cref="T:Yarn.Compiler.IndentAwareLexer.Warning"/> objects we've
            generated.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.IndentAwareLexer.#ctor(Antlr4.Runtime.ICharStream,System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Yarn.Compiler.IndentAwareLexer"/> class.
            </summary>
            <param name="input">The incoming character stream.</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to send
            output to.</param>
            <param name="errorOutput">The <see cref="T:System.IO.TextWriter"/> to send
            errors to.</param>
        </member>
        <member name="M:Yarn.Compiler.IndentAwareLexer.#ctor(Antlr4.Runtime.ICharStream)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Yarn.Compiler.IndentAwareLexer"/> class.
            </summary>
            <param name="input">The incoming character stream.</param>
        </member>
        <member name="P:Yarn.Compiler.IndentAwareLexer.Warnings">
            <summary>
            Gets the collection of warnings determined during lexing.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.IndentAwareLexer.NextToken">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.IndentAwareLexer.InsertToken(System.String,System.Int32)">
            <summary>
            Inserts a new token with the given text and type, as though it
            had appeared in the input stream.
            </summary>
            <param name="text">The text to use for the token.</param>
            <param name="type">The type of the token.</param>
            <remarks>The token will have a zero length.</remarks>
        </member>
        <member name="T:Yarn.Compiler.IndentAwareLexer.Warning">
            <summary>
            A warning emitted during lexing.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.Warning.Token">
            <summary>
            The token associated with the warning.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.IndentAwareLexer.Warning.Message">
            <summary>
            The message associated with the warning.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.Project">
            <summary>
            Yarn Projects represent instructions on where to find Yarn scripts and
            associated assets, and how they should be compiled.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Project.CurrentProjectFileVersion">
            <summary>
            The current version of <c>.yarnproject</c> file format.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Project.FileVersion">
            <summary>
            Gets or sets the file version of the project.
            </summary>
            <remarks>
            This value is required to be equal to <see
            cref="F:Yarn.Compiler.Project.CurrentProjectFileVersion"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Project.Path">
            <summary>
            Gets the path that the <see cref="T:Yarn.Compiler.Project"/> was loaded from.
            </summary>
            <remarks>
            This value is not stored when the file is saved, but is instead
            determined when the file is loaded by <see
            cref="M:Yarn.Compiler.Project.LoadFromFile(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Project.SourceFilePatterns">
            <summary>
            Gets or sets the collection of file search patterns used to locate
            Yarn files that form this project.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Project.ExcludeFilePatterns">
            <summary>
            Gets or sets the collection of file search patterns that should be
            excluded from this project.
            </summary>
            <remarks>
            If a file is matched by a pattern in <see
            cref="P:Yarn.Compiler.Project.SourceFilePatterns"/>, and is also matched by a pattern in
            <see cref="P:Yarn.Compiler.Project.ExcludeFilePatterns"/>, then it is not included in the
            value returned by <see cref="P:Yarn.Compiler.Project.SourceFiles"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Project.Localisation">
            <summary>
            Gets or sets the collection of <see cref="T:Yarn.Compiler.Project.LocalizationInfo"/>
            objects that store information about where localized data for this
            project is found.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Project.BaseLanguage">
            <summary>
            Gets or sets the base language of the project, as an IETF BCP-47
            language tag.
            </summary>
            <remarks>
            The base language is the language that the Yarn scripts is written
            in.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Project.Definitions">
            <summary>
            Gets or sets the path to a JSON file containing command and function
            definitions that this project references.
            </summary>
            <remarks>
            Definitions files are used by editing tools to provide type
            information and other externally-defined data used by the Yarn
            scripts.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Project.CompilerOptions">
            <summary>
            Gets or sets a dictionary containing instructions that control how
            the Yarn Spinner compiler should compile a project.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Project.SourceFiles">
            <summary>
            Gets the collection of Yarn files that should be used to compile the
            project.
            </summary>
            <remarks>
            This collection uses a <see cref="P:Yarn.Compiler.Project.Matcher"/> to find all files
            specified by <see cref="P:Yarn.Compiler.Project.SourceFilePatterns"/>, excluding those that
            are specified by <see cref="P:Yarn.Compiler.Project.ExcludeFilePatterns"/>.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.Project.DefinitionsPath">
            <summary>
            Gets the path to the Definitions file, relative to this project's
            location.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Project.SearchDirectoryPath">
            <summary>
            Gets the path of the directory from which to start searching for
            .yarn files. This value is null if the directory does not exist on
            disk.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Project.IsMatchingPath(System.String)">
            <summary>
            Gets a value indicating whether <paramref name="path"/> is a path
            that is included in this project.
            </summary>
            <param name="path">The path to check.</param>
            <returns><see langword="true"/> if <paramref name="path"/> is a path
            that is included in this project; <see langword="false"/>
            otherwise.</returns>
        </member>
        <member name="P:Yarn.Compiler.Project.CurrentNeutralCulture">
            <summary>
            Gets a neutral <see cref="T:System.Globalization.CultureInfo"/> that
            represents the current culture.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Project.LoadFromFile(System.String)">
            <summary>
            Loads and parses a <see cref="T:Yarn.Compiler.Project"/> from a file on disk.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns>The loaded <see cref="T:Yarn.Compiler.Project"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the contents of the
            file cannot be loaded.</exception>
        </member>
        <member name="M:Yarn.Compiler.Project.SaveToFile(System.String)">
            <summary>
            Saves a <see cref="T:Yarn.Compiler.Project"/> as JSON-formatted text to a file on
            disk.
            </summary>
            <param name="path">The path of the file to write to.</param>
        </member>
        <member name="M:Yarn.Compiler.Project.GetJson">
            <summary>
            Gets a string containing JSON-formatted text that represents this
            <see cref="T:Yarn.Compiler.Project"/>.
            </summary>
            <returns>The <see cref="T:Yarn.Compiler.Project"/>, serialized to JSON.</returns>
        </member>
        <member name="T:Yarn.Compiler.Project.LocalizationInfo">
            <summary>
            Stores the locations of where localized assets and a localized
            string table for a Yarn Project may be found.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Project.LocalizationInfo.Assets">
            <summary>
            Gets or sets the location at which localized assets may be
            found.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Project.LocalizationInfo.Strings">
            <summary>
            Gets or sets the location at which the localized string table
            may be found.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.StringInfo">
            <summary>
            Information about a string. Stored inside a string table, which is
            produced from the Compiler.
            </summary>
            <remarks>
            You do not create instances of this class yourself. They are
            generated by the <see cref="T:Yarn.Compiler.Compiler"/>.
            </remarks>
        </member>
        <member name="F:Yarn.Compiler.StringInfo.text">
            <summary>
            The original text of the string.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.StringInfo.nodeName">
            <summary>
            The name of the node that this string was found in.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.StringInfo.lineNumber">
            <summary>
            The line number at which this string was found in the file.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.StringInfo.fileName">
            <summary>
            The name of the file this string was found in.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.StringInfo.isImplicitTag">
            <summary>
            Indicates whether this string's line ID was implicitly
            generated.
            </summary>
            <remarks>
            Implicitly generated line IDs are not guaranteed to remain the
            same across multiple compilations. To ensure that a line ID
            remains the same, you must define it by adding a line tag to the
            line.
            </remarks>
        </member>
        <member name="F:Yarn.Compiler.StringInfo.metadata">
            <summary>
            The metadata (i.e. hashtags) associated with this string.
            </summary>
            <remarks>
            This array will contain any hashtags associated with this
            string besides the <c>#line:</c> hashtag.
            </remarks>
        </member>
        <member name="M:Yarn.Compiler.StringInfo.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Yarn.Compiler.StringInfo"/>
            struct.
            </summary>
            <param name="text">The text of the string.</param>
            <param name="fileName">The file name.</param>
            <param name="nodeName">The node name.</param>
            <param name="lineNumber">The line number.</param>
            <param name="isImplicitTag">If <c>true</c>, this string info is
            stored with an implicit line ID.</param>
            <param name="metadata">The string's metadata.</param>
        </member>
        <member name="M:Yarn.Compiler.StringInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Yarn.Compiler.StringTableGeneratorVisitor">
            <summary>
            A Visitor that walks an expression parse tree and generates string
            table entries, which are provided to a <see
            cref="T:Yarn.Compiler.StringTableManager"/>. This string table can then be provided
            to future compilation passes, or stored for later use. Call the
            <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.Visit(Antlr4.Runtime.Tree.IParseTree)"/> method to begin generating string table
            entries.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.StringTableGeneratorVisitor.Diagnostics">
            <summary>
            Gets the collection of <see cref="T:Yarn.Compiler.Diagnostic"/> objects
            generated by this object.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.StringTableManager.CRC32.GetChecksumString(System.String)">
            <summary>
            Gets the CRC-32 hash of <paramref name="s"/> as a string
            containing 8 lowercase hexadecimal characters.
            </summary>
            <param name="s">The string to get the checksum of.</param>
            <returns>The string containing the checksum.</returns>
        </member>
        <member name="M:Yarn.Compiler.StringTableManager.RegisterString(System.String,System.String,System.String,System.String,System.Int32,System.String[])">
            <summary>
            Registers a new string in the string table.
            </summary>
            <param name="text">The text of the string to register.</param>
            <param name="fileName">The name of the yarn file that this line is contained within</param>
            <param name="nodeName">The name of the node that this string
            was found in.</param>
            <param name="lineID">The line ID to use for this entry in the
            string table.</param>
            <param name="lineNumber">The line number that this string was
            found in.</param>
            <param name="tags">The tags to associate with this string in
            the string table.</param>
            <returns>The string ID for the newly registered
            string.</returns>
            <remarks>If <paramref name="lineID"/> is <see
            langword="null"/>, a line ID will be generated from <paramref
            name="fileName"/>, <paramref name="nodeName"/>, and the number
            of elements in <see cref="F:Yarn.Compiler.StringTableManager.StringTable"/>.</remarks>
        </member>
        <member name="M:Yarn.Compiler.StringTableManager.ContainsKey(System.String)">
            <summary>
            Checks to see if this string table already contains a line with
            the line ID <paramref name="lineID"/>.
            </summary>
            <param name="lineID">The line ID to check for.</param>
            <returns><see langword="true"/> if the string table already
            contains a line with this ID, <see langword="false"/>
            otherwise.</returns>
        </member>
        <member name="T:Yarn.Compiler.TypeCheckVisitor">
            <summary>
            A visitor that walks the parse tree, checking for type consistency
            in expressions. Existing type information is provided via the <see
            cref="F:Yarn.Compiler.TypeCheckVisitor.existingDeclarations"/> property. This visitor will also
            attempt to infer the type of variables that don't have an explicit
            declaration; for each of these, a new Declaration will be created
            and made available via the <see cref="P:Yarn.Compiler.TypeCheckVisitor.NewDeclarations"/> property.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.TypeCheckVisitor.currentNodeContext">
            <summary>
            The context of the node we're currently in.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.TypeCheckVisitor.sourceFileName">
            <summary>
            The name of the file we're currently in.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.TypeCheckVisitor.NewDeclarations">
            <summary>
            Gets the collection of new variable declarations that were
            found as a result of using this <see
            cref="T:Yarn.Compiler.TypeCheckVisitor"/> to visit a <see
            cref="T:Antlr4.Runtime.ParserRuleContext"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.TypeCheckVisitor.Declarations">
            <summary>
            Gets the collection of all declarations - both the ones we received
            at the start, and the new ones we've derived ourselves.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.TypeCheckVisitor.#ctor(System.String,System.Collections.Generic.IEnumerable{Yarn.Compiler.Declaration},System.Collections.Generic.IEnumerable{Yarn.IType})">
            <summary>
            Initializes a new instance of the <see
            cref="T:Yarn.Compiler.TypeCheckVisitor"/> class.
            </summary>
            <param name="sourceFileName">The name of the source file that
            the visitor will operate on.</param>
            <param name="existingDeclarations">A collection of <see
            cref="T:Yarn.Compiler.Declaration"/> objects that contain type
            information.</param>
            <param name="types">A collection of type definitions.</param>
        </member>
        <member name="T:Yarn.Compiler.TypeDeclarationListener">
            <summary>
            A listener that, when used with a <see cref="T:Antlr4.Runtime.Tree.ParseTreeWalker"/>,
            populates a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Yarn.IType"/> objects
            that represent any new types that were declared in the parse tree.
            These new types can then be used for values elsewhere in the
            script.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Upgrader.UpgradeResult.Diagnostics">
            <summary>
            Gets a collection containing all <see cref="T:Yarn.Compiler.Diagnostic"/>
            objects across all of the files in <see cref="F:Yarn.Compiler.Upgrader.UpgradeResult.Files"/>.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Upgrader.UpgradeResult.OutputFile.IsNewFile">
            <summary>
            Indicates whether this <see cref="T:Yarn.Compiler.Upgrader.UpgradeResult.OutputFile"/> represents
            a new file to be created. If this is <see
            langword="true"/>, <see cref="F:Yarn.Compiler.Upgrader.UpgradeResult.OutputFile.OriginalSource"/> will be the
            empty string, and <see cref="F:Yarn.Compiler.Upgrader.UpgradeResult.OutputFile.Replacements"/> will be empty.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Upgrader.UpgradeResult.OutputFile.Merge(Yarn.Compiler.Upgrader.UpgradeResult.OutputFile,Yarn.Compiler.Upgrader.UpgradeResult.OutputFile)">
            <summary>
            Merges two <see cref="T:Yarn.Compiler.Upgrader.UpgradeResult.OutputFile"/> objects, producing a
            merged result.
            </summary>
            <param name="a">The first file.</param>
            <param name="b">The second file.</param>
            <returns>The merged result.</returns>
        </member>
        <member name="T:Yarn.Compiler.Upgrader.TextReplacement">
            <summary>
            Contains information describing a replacement to make in a string.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Upgrader.TextReplacement.Start">
            <summary>
            The position in the original string where the substitution
            should be made.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Upgrader.TextReplacement.StartLine">
            <summary>
            The line in the original string where the substitution should
            be made.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Upgrader.TextReplacement.OriginalText">
            <summary>
            The string to expect at <see cref="F:Yarn.Compiler.Upgrader.TextReplacement.Start"/> in the original
            string.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Upgrader.TextReplacement.ReplacementText">
            <summary>
            The string to replace <see cref="F:Yarn.Compiler.Upgrader.TextReplacement.OriginalText"/> with at <see
            cref="F:Yarn.Compiler.Upgrader.TextReplacement.Start"/>.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Upgrader.TextReplacement.Comment">
            <summary>
            A descriptive comment explaining why the substitution is
            necessary.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Upgrader.TextReplacement.OriginalLength">
            <summary>
            Gets the length of <see cref="F:Yarn.Compiler.Upgrader.TextReplacement.OriginalText"/>.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.Upgrader.TextReplacement.ReplacementLength">
            <summary>
            Gets the length of <see cref="P:Yarn.Compiler.Upgrader.TextReplacement.ReplacementLength"/>.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.Upgrader.LanguageUpgrader">
            <summary>
            Contains methods for upgrading the syntax of Yarn scripts.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Upgrader.LanguageUpgrader.Upgrade(Yarn.Compiler.Upgrader.UpgradeJob)">
            <summary>
            Upgrades a Yarn script from one version of the language to
            another, producing both the fully upgraded text as well as a
            collection of replacements.
            </summary>
            <param name="upgradeJob">The upgrade job to perform.</param>
            <throws cref="T:System.ArgumentException">Thrown if the 
            <see cref="F:Yarn.Compiler.Upgrader.UpgradeJob.UpgradeType"/> is unsupported.</throws>
            <returns>An <see cref="T:Yarn.Compiler.Upgrader.UpgradeResult"/> object containing the
            results of the upgrade operation.</returns>
        </member>
        <member name="M:Yarn.Compiler.Upgrader.LanguageUpgrader.ApplyReplacements(System.String,System.Collections.Generic.IEnumerable{Yarn.Compiler.Upgrader.TextReplacement})">
            <summary>
            Applies a collection of string replacements to a string.
            </summary>
            <param name="originalText">The string to modify.</param>
            <param name="replacements">A collection of <see
            cref="T:Yarn.Compiler.Upgrader.TextReplacement"/>s to make in the <paramref
            name="originalText"/>.</param>
            <returns>The modified string.</returns>
            <throws cref="T:System.ArgumentOutOfRangeException">Thrown when a
            replacement refers to an invalid position in originalText, or
            its original text does not match what exists in the
            text.</throws>
        </member>
        <member name="T:Yarn.Compiler.Upgrader.TypeBinding">
            <summary>
            Stores information about a relationship between a variable and its
            type.
            </summary>
            <remarks>
            This type is generated by classes such as <see
            cref="T:Yarn.Compiler.Upgrader.VariableDeclarationUpgrader.VariableTypeBindingVisitor"/>.
            It's possible for multiple type bindings for a single variable may
            exist, such as in cases where a variable is being used as a string
            and a number. This is syntactically valid, but semantically an
            error; to detect cases like this, users of this class should gather
            every possible binding they can find for a variable, and then call
            <see cref="M:Yarn.Compiler.Upgrader.TypeBinding.UnifyBindings(System.Collections.Generic.IEnumerable{Yarn.Compiler.Upgrader.TypeBinding})"/>.
            </remarks>
        </member>
        <member name="T:Yarn.Compiler.Upgrader.VariableDeclarationUpgrader.VariableTypeBindingVisitor">
            <summary>
            A Visitor that walks an expression parse tree and returns its type.
            Call the <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.Visit(Antlr4.Runtime.Tree.IParseTree)"/> method to begin checking. If a single
            valid type for the parse tree can't be found, a TypeException is
            thrown.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.Upgrader.UpgradeType">
            <summary>
            Specifies what kind of language upgrading should be applied.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.Upgrader.UpgradeType.Version1to2">
            <summary>
            Indicates an upgrade from Yarn Spinner 1.0 syntax to Yarn
            Spinner 2.0 syntax.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.YarnSpinnerV1ParserBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:Yarn.Compiler.IYarnSpinnerV1ParserListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterDialogue(Yarn.Compiler.YarnSpinnerV1Parser.DialogueContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.dialogue"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitDialogue(Yarn.Compiler.YarnSpinnerV1Parser.DialogueContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.dialogue"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterFile_hashtag(Yarn.Compiler.YarnSpinnerV1Parser.File_hashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.file_hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitFile_hashtag(Yarn.Compiler.YarnSpinnerV1Parser.File_hashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.file_hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterNode(Yarn.Compiler.YarnSpinnerV1Parser.NodeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.node"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitNode(Yarn.Compiler.YarnSpinnerV1Parser.NodeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.node"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterHeader(Yarn.Compiler.YarnSpinnerV1Parser.HeaderContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.header"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitHeader(Yarn.Compiler.YarnSpinnerV1Parser.HeaderContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.header"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterBody(Yarn.Compiler.YarnSpinnerV1Parser.BodyContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.body"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitBody(Yarn.Compiler.YarnSpinnerV1Parser.BodyContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.body"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterStatement(Yarn.Compiler.YarnSpinnerV1Parser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitStatement(Yarn.Compiler.YarnSpinnerV1Parser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterLine_statement(Yarn.Compiler.YarnSpinnerV1Parser.Line_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitLine_statement(Yarn.Compiler.YarnSpinnerV1Parser.Line_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterLine_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Line_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitLine_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Line_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterFormat_function(Yarn.Compiler.YarnSpinnerV1Parser.Format_functionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.format_function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitFormat_function(Yarn.Compiler.YarnSpinnerV1Parser.Format_functionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.format_function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterKeyValuePairNamed(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNamedContext)">
            <summary>
            Enter a parse tree produced by the <c>KeyValuePairNamed</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitKeyValuePairNamed(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNamedContext)">
            <summary>
            Exit a parse tree produced by the <c>KeyValuePairNamed</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterKeyValuePairNumber(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>KeyValuePairNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitKeyValuePairNumber(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>KeyValuePairNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterHashtag(Yarn.Compiler.YarnSpinnerV1Parser.HashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitHashtag(Yarn.Compiler.YarnSpinnerV1Parser.HashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterLine_condition(Yarn.Compiler.YarnSpinnerV1Parser.Line_conditionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_condition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitLine_condition(Yarn.Compiler.YarnSpinnerV1Parser.Line_conditionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_condition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpParens(Yarn.Compiler.YarnSpinnerV1Parser.ExpParensContext)">
            <summary>
            Enter a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpParens(Yarn.Compiler.YarnSpinnerV1Parser.ExpParensContext)">
            <summary>
            Exit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpMultDivMod(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModContext)">
            <summary>
            Enter a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpMultDivMod(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModContext)">
            <summary>
            Exit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpMultDivModEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>expMultDivModEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpMultDivModEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>expMultDivModEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpComparison(Yarn.Compiler.YarnSpinnerV1Parser.ExpComparisonContext)">
            <summary>
            Enter a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpComparison(Yarn.Compiler.YarnSpinnerV1Parser.ExpComparisonContext)">
            <summary>
            Exit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpNegative(Yarn.Compiler.YarnSpinnerV1Parser.ExpNegativeContext)">
            <summary>
            Enter a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpNegative(Yarn.Compiler.YarnSpinnerV1Parser.ExpNegativeContext)">
            <summary>
            Exit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpAndOrXor(Yarn.Compiler.YarnSpinnerV1Parser.ExpAndOrXorContext)">
            <summary>
            Enter a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpAndOrXor(Yarn.Compiler.YarnSpinnerV1Parser.ExpAndOrXorContext)">
            <summary>
            Exit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpPlusMinusEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpPlusMinusEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>expPlusMinusEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpPlusMinusEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpPlusMinusEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>expPlusMinusEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpAddSub(Yarn.Compiler.YarnSpinnerV1Parser.ExpAddSubContext)">
            <summary>
            Enter a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpAddSub(Yarn.Compiler.YarnSpinnerV1Parser.ExpAddSubContext)">
            <summary>
            Exit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpNot(Yarn.Compiler.YarnSpinnerV1Parser.ExpNotContext)">
            <summary>
            Enter a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpNot(Yarn.Compiler.YarnSpinnerV1Parser.ExpNotContext)">
            <summary>
            Exit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpValue(Yarn.Compiler.YarnSpinnerV1Parser.ExpValueContext)">
            <summary>
            Enter a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpValue(Yarn.Compiler.YarnSpinnerV1Parser.ExpValueContext)">
            <summary>
            Exit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterExpEquality(Yarn.Compiler.YarnSpinnerV1Parser.ExpEqualityContext)">
            <summary>
            Enter a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitExpEquality(Yarn.Compiler.YarnSpinnerV1Parser.ExpEqualityContext)">
            <summary>
            Exit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterValueNumber(Yarn.Compiler.YarnSpinnerV1Parser.ValueNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitValueNumber(Yarn.Compiler.YarnSpinnerV1Parser.ValueNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterValueTrue(Yarn.Compiler.YarnSpinnerV1Parser.ValueTrueContext)">
            <summary>
            Enter a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitValueTrue(Yarn.Compiler.YarnSpinnerV1Parser.ValueTrueContext)">
            <summary>
            Exit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterValueFalse(Yarn.Compiler.YarnSpinnerV1Parser.ValueFalseContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitValueFalse(Yarn.Compiler.YarnSpinnerV1Parser.ValueFalseContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterValueVar(Yarn.Compiler.YarnSpinnerV1Parser.ValueVarContext)">
            <summary>
            Enter a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitValueVar(Yarn.Compiler.YarnSpinnerV1Parser.ValueVarContext)">
            <summary>
            Exit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterValueString(Yarn.Compiler.YarnSpinnerV1Parser.ValueStringContext)">
            <summary>
            Enter a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitValueString(Yarn.Compiler.YarnSpinnerV1Parser.ValueStringContext)">
            <summary>
            Exit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterValueNull(Yarn.Compiler.YarnSpinnerV1Parser.ValueNullContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitValueNull(Yarn.Compiler.YarnSpinnerV1Parser.ValueNullContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterValueFunc(Yarn.Compiler.YarnSpinnerV1Parser.ValueFuncContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitValueFunc(Yarn.Compiler.YarnSpinnerV1Parser.ValueFuncContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterVariable(Yarn.Compiler.YarnSpinnerV1Parser.VariableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.variable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitVariable(Yarn.Compiler.YarnSpinnerV1Parser.VariableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.variable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterFunction(Yarn.Compiler.YarnSpinnerV1Parser.FunctionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitFunction(Yarn.Compiler.YarnSpinnerV1Parser.FunctionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterIf_statement(Yarn.Compiler.YarnSpinnerV1Parser.If_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitIf_statement(Yarn.Compiler.YarnSpinnerV1Parser.If_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterIf_clause(Yarn.Compiler.YarnSpinnerV1Parser.If_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitIf_clause(Yarn.Compiler.YarnSpinnerV1Parser.If_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterElse_if_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_if_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitElse_if_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_if_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterElse_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitElse_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterSetVariableToValue(Yarn.Compiler.YarnSpinnerV1Parser.SetVariableToValueContext)">
            <summary>
            Enter a parse tree produced by the <c>setVariableToValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitSetVariableToValue(Yarn.Compiler.YarnSpinnerV1Parser.SetVariableToValueContext)">
            <summary>
            Exit a parse tree produced by the <c>setVariableToValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterSetExpression(Yarn.Compiler.YarnSpinnerV1Parser.SetExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>setExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitSetExpression(Yarn.Compiler.YarnSpinnerV1Parser.SetExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>setExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterCall_statement(Yarn.Compiler.YarnSpinnerV1Parser.Call_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.call_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitCall_statement(Yarn.Compiler.YarnSpinnerV1Parser.Call_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.call_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterCommand_statement(Yarn.Compiler.YarnSpinnerV1Parser.Command_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitCommand_statement(Yarn.Compiler.YarnSpinnerV1Parser.Command_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterCommand_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Command_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitCommand_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Command_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterShortcut_option_statement(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_option_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitShortcut_option_statement(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_option_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterShortcut_option(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_optionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitShortcut_option(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_optionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterOptionLink(Yarn.Compiler.YarnSpinnerV1Parser.OptionLinkContext)">
            <summary>
            Enter a parse tree produced by the <c>OptionLink</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitOptionLink(Yarn.Compiler.YarnSpinnerV1Parser.OptionLinkContext)">
            <summary>
            Exit a parse tree produced by the <c>OptionLink</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterOptionJump(Yarn.Compiler.YarnSpinnerV1Parser.OptionJumpContext)">
            <summary>
            Enter a parse tree produced by the <c>OptionJump</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitOptionJump(Yarn.Compiler.YarnSpinnerV1Parser.OptionJumpContext)">
            <summary>
            Exit a parse tree produced by the <c>OptionJump</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterOption_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Option_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitOption_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Option_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitDialogue(Yarn.Compiler.YarnSpinnerV1Parser.DialogueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.dialogue"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitFile_hashtag(Yarn.Compiler.YarnSpinnerV1Parser.File_hashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.file_hashtag"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitNode(Yarn.Compiler.YarnSpinnerV1Parser.NodeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.node"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitHeader(Yarn.Compiler.YarnSpinnerV1Parser.HeaderContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.header"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitBody(Yarn.Compiler.YarnSpinnerV1Parser.BodyContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.body"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitStatement(Yarn.Compiler.YarnSpinnerV1Parser.StatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitLine_statement(Yarn.Compiler.YarnSpinnerV1Parser.Line_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitLine_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Line_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_formatted_text"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitFormat_function(Yarn.Compiler.YarnSpinnerV1Parser.Format_functionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.format_function"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitKeyValuePairNamed(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNamedContext)">
            <summary>
            Visit a parse tree produced by the <c>KeyValuePairNamed</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitKeyValuePairNumber(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>KeyValuePairNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitHashtag(Yarn.Compiler.YarnSpinnerV1Parser.HashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.hashtag"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitLine_condition(Yarn.Compiler.YarnSpinnerV1Parser.Line_conditionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_condition"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpParens(Yarn.Compiler.YarnSpinnerV1Parser.ExpParensContext)">
            <summary>
            Visit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpMultDivMod(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModContext)">
            <summary>
            Visit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpMultDivModEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>expMultDivModEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpComparison(Yarn.Compiler.YarnSpinnerV1Parser.ExpComparisonContext)">
            <summary>
            Visit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpNegative(Yarn.Compiler.YarnSpinnerV1Parser.ExpNegativeContext)">
            <summary>
            Visit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpAndOrXor(Yarn.Compiler.YarnSpinnerV1Parser.ExpAndOrXorContext)">
            <summary>
            Visit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpPlusMinusEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpPlusMinusEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>expPlusMinusEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpAddSub(Yarn.Compiler.YarnSpinnerV1Parser.ExpAddSubContext)">
            <summary>
            Visit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpNot(Yarn.Compiler.YarnSpinnerV1Parser.ExpNotContext)">
            <summary>
            Visit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpValue(Yarn.Compiler.YarnSpinnerV1Parser.ExpValueContext)">
            <summary>
            Visit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitExpEquality(Yarn.Compiler.YarnSpinnerV1Parser.ExpEqualityContext)">
            <summary>
            Visit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitValueNumber(Yarn.Compiler.YarnSpinnerV1Parser.ValueNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitValueTrue(Yarn.Compiler.YarnSpinnerV1Parser.ValueTrueContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitValueFalse(Yarn.Compiler.YarnSpinnerV1Parser.ValueFalseContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitValueVar(Yarn.Compiler.YarnSpinnerV1Parser.ValueVarContext)">
            <summary>
            Visit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitValueString(Yarn.Compiler.YarnSpinnerV1Parser.ValueStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitValueNull(Yarn.Compiler.YarnSpinnerV1Parser.ValueNullContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitValueFunc(Yarn.Compiler.YarnSpinnerV1Parser.ValueFuncContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitVariable(Yarn.Compiler.YarnSpinnerV1Parser.VariableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.variable"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitFunction(Yarn.Compiler.YarnSpinnerV1Parser.FunctionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.function"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitIf_statement(Yarn.Compiler.YarnSpinnerV1Parser.If_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitIf_clause(Yarn.Compiler.YarnSpinnerV1Parser.If_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_clause"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitElse_if_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_if_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_if_clause"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitElse_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_clause"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitSetVariableToValue(Yarn.Compiler.YarnSpinnerV1Parser.SetVariableToValueContext)">
            <summary>
            Visit a parse tree produced by the <c>setVariableToValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitSetExpression(Yarn.Compiler.YarnSpinnerV1Parser.SetExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>setExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitCall_statement(Yarn.Compiler.YarnSpinnerV1Parser.Call_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.call_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitCommand_statement(Yarn.Compiler.YarnSpinnerV1Parser.Command_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitCommand_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Command_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_formatted_text"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitShortcut_option_statement(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_option_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitShortcut_option(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_optionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitOptionLink(Yarn.Compiler.YarnSpinnerV1Parser.OptionLinkContext)">
            <summary>
            Visit a parse tree produced by the <c>OptionLink</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitOptionJump(Yarn.Compiler.YarnSpinnerV1Parser.OptionJumpContext)">
            <summary>
            Visit a parse tree produced by the <c>OptionJump</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerV1ParserBaseVisitor`1.VisitOption_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Option_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_formatted_text"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:Yarn.Compiler.IYarnSpinnerV1ParserListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:Yarn.Compiler.YarnSpinnerV1Parser"/>.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterDialogue(Yarn.Compiler.YarnSpinnerV1Parser.DialogueContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.dialogue"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitDialogue(Yarn.Compiler.YarnSpinnerV1Parser.DialogueContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.dialogue"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterFile_hashtag(Yarn.Compiler.YarnSpinnerV1Parser.File_hashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.file_hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitFile_hashtag(Yarn.Compiler.YarnSpinnerV1Parser.File_hashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.file_hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterNode(Yarn.Compiler.YarnSpinnerV1Parser.NodeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.node"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitNode(Yarn.Compiler.YarnSpinnerV1Parser.NodeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.node"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterHeader(Yarn.Compiler.YarnSpinnerV1Parser.HeaderContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.header"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitHeader(Yarn.Compiler.YarnSpinnerV1Parser.HeaderContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.header"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterBody(Yarn.Compiler.YarnSpinnerV1Parser.BodyContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.body"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitBody(Yarn.Compiler.YarnSpinnerV1Parser.BodyContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.body"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterStatement(Yarn.Compiler.YarnSpinnerV1Parser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitStatement(Yarn.Compiler.YarnSpinnerV1Parser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterLine_statement(Yarn.Compiler.YarnSpinnerV1Parser.Line_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitLine_statement(Yarn.Compiler.YarnSpinnerV1Parser.Line_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterLine_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Line_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitLine_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Line_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterFormat_function(Yarn.Compiler.YarnSpinnerV1Parser.Format_functionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.format_function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitFormat_function(Yarn.Compiler.YarnSpinnerV1Parser.Format_functionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.format_function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterKeyValuePairNamed(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNamedContext)">
            <summary>
            Enter a parse tree produced by the <c>KeyValuePairNamed</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitKeyValuePairNamed(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNamedContext)">
            <summary>
            Exit a parse tree produced by the <c>KeyValuePairNamed</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterKeyValuePairNumber(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>KeyValuePairNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitKeyValuePairNumber(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>KeyValuePairNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterHashtag(Yarn.Compiler.YarnSpinnerV1Parser.HashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitHashtag(Yarn.Compiler.YarnSpinnerV1Parser.HashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterLine_condition(Yarn.Compiler.YarnSpinnerV1Parser.Line_conditionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_condition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitLine_condition(Yarn.Compiler.YarnSpinnerV1Parser.Line_conditionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_condition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpParens(Yarn.Compiler.YarnSpinnerV1Parser.ExpParensContext)">
            <summary>
            Enter a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpParens(Yarn.Compiler.YarnSpinnerV1Parser.ExpParensContext)">
            <summary>
            Exit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpMultDivMod(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModContext)">
            <summary>
            Enter a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpMultDivMod(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModContext)">
            <summary>
            Exit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpMultDivModEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>expMultDivModEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpMultDivModEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>expMultDivModEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpComparison(Yarn.Compiler.YarnSpinnerV1Parser.ExpComparisonContext)">
            <summary>
            Enter a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpComparison(Yarn.Compiler.YarnSpinnerV1Parser.ExpComparisonContext)">
            <summary>
            Exit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpNegative(Yarn.Compiler.YarnSpinnerV1Parser.ExpNegativeContext)">
            <summary>
            Enter a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpNegative(Yarn.Compiler.YarnSpinnerV1Parser.ExpNegativeContext)">
            <summary>
            Exit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpAndOrXor(Yarn.Compiler.YarnSpinnerV1Parser.ExpAndOrXorContext)">
            <summary>
            Enter a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpAndOrXor(Yarn.Compiler.YarnSpinnerV1Parser.ExpAndOrXorContext)">
            <summary>
            Exit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpPlusMinusEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpPlusMinusEqualsContext)">
            <summary>
            Enter a parse tree produced by the <c>expPlusMinusEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpPlusMinusEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpPlusMinusEqualsContext)">
            <summary>
            Exit a parse tree produced by the <c>expPlusMinusEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpAddSub(Yarn.Compiler.YarnSpinnerV1Parser.ExpAddSubContext)">
            <summary>
            Enter a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpAddSub(Yarn.Compiler.YarnSpinnerV1Parser.ExpAddSubContext)">
            <summary>
            Exit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpNot(Yarn.Compiler.YarnSpinnerV1Parser.ExpNotContext)">
            <summary>
            Enter a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpNot(Yarn.Compiler.YarnSpinnerV1Parser.ExpNotContext)">
            <summary>
            Exit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpValue(Yarn.Compiler.YarnSpinnerV1Parser.ExpValueContext)">
            <summary>
            Enter a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpValue(Yarn.Compiler.YarnSpinnerV1Parser.ExpValueContext)">
            <summary>
            Exit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterExpEquality(Yarn.Compiler.YarnSpinnerV1Parser.ExpEqualityContext)">
            <summary>
            Enter a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitExpEquality(Yarn.Compiler.YarnSpinnerV1Parser.ExpEqualityContext)">
            <summary>
            Exit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterValueNumber(Yarn.Compiler.YarnSpinnerV1Parser.ValueNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitValueNumber(Yarn.Compiler.YarnSpinnerV1Parser.ValueNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterValueTrue(Yarn.Compiler.YarnSpinnerV1Parser.ValueTrueContext)">
            <summary>
            Enter a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitValueTrue(Yarn.Compiler.YarnSpinnerV1Parser.ValueTrueContext)">
            <summary>
            Exit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterValueFalse(Yarn.Compiler.YarnSpinnerV1Parser.ValueFalseContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitValueFalse(Yarn.Compiler.YarnSpinnerV1Parser.ValueFalseContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterValueVar(Yarn.Compiler.YarnSpinnerV1Parser.ValueVarContext)">
            <summary>
            Enter a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitValueVar(Yarn.Compiler.YarnSpinnerV1Parser.ValueVarContext)">
            <summary>
            Exit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterValueString(Yarn.Compiler.YarnSpinnerV1Parser.ValueStringContext)">
            <summary>
            Enter a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitValueString(Yarn.Compiler.YarnSpinnerV1Parser.ValueStringContext)">
            <summary>
            Exit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterValueNull(Yarn.Compiler.YarnSpinnerV1Parser.ValueNullContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitValueNull(Yarn.Compiler.YarnSpinnerV1Parser.ValueNullContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterValueFunc(Yarn.Compiler.YarnSpinnerV1Parser.ValueFuncContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitValueFunc(Yarn.Compiler.YarnSpinnerV1Parser.ValueFuncContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterVariable(Yarn.Compiler.YarnSpinnerV1Parser.VariableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitVariable(Yarn.Compiler.YarnSpinnerV1Parser.VariableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterFunction(Yarn.Compiler.YarnSpinnerV1Parser.FunctionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitFunction(Yarn.Compiler.YarnSpinnerV1Parser.FunctionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterIf_statement(Yarn.Compiler.YarnSpinnerV1Parser.If_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitIf_statement(Yarn.Compiler.YarnSpinnerV1Parser.If_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterIf_clause(Yarn.Compiler.YarnSpinnerV1Parser.If_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitIf_clause(Yarn.Compiler.YarnSpinnerV1Parser.If_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterElse_if_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_if_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitElse_if_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_if_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterElse_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitElse_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterSetVariableToValue(Yarn.Compiler.YarnSpinnerV1Parser.SetVariableToValueContext)">
            <summary>
            Enter a parse tree produced by the <c>setVariableToValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitSetVariableToValue(Yarn.Compiler.YarnSpinnerV1Parser.SetVariableToValueContext)">
            <summary>
            Exit a parse tree produced by the <c>setVariableToValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterSetExpression(Yarn.Compiler.YarnSpinnerV1Parser.SetExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>setExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitSetExpression(Yarn.Compiler.YarnSpinnerV1Parser.SetExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>setExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterCall_statement(Yarn.Compiler.YarnSpinnerV1Parser.Call_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.call_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitCall_statement(Yarn.Compiler.YarnSpinnerV1Parser.Call_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.call_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterCommand_statement(Yarn.Compiler.YarnSpinnerV1Parser.Command_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitCommand_statement(Yarn.Compiler.YarnSpinnerV1Parser.Command_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterCommand_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Command_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitCommand_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Command_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterShortcut_option_statement(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_option_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitShortcut_option_statement(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_option_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterShortcut_option(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_optionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitShortcut_option(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_optionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterOptionLink(Yarn.Compiler.YarnSpinnerV1Parser.OptionLinkContext)">
            <summary>
            Enter a parse tree produced by the <c>OptionLink</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitOptionLink(Yarn.Compiler.YarnSpinnerV1Parser.OptionLinkContext)">
            <summary>
            Exit a parse tree produced by the <c>OptionLink</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterOptionJump(Yarn.Compiler.YarnSpinnerV1Parser.OptionJumpContext)">
            <summary>
            Enter a parse tree produced by the <c>OptionJump</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitOptionJump(Yarn.Compiler.YarnSpinnerV1Parser.OptionJumpContext)">
            <summary>
            Exit a parse tree produced by the <c>OptionJump</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.EnterOption_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Option_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserListener.ExitOption_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Option_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:Yarn.Compiler.YarnSpinnerV1Parser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitDialogue(Yarn.Compiler.YarnSpinnerV1Parser.DialogueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.dialogue"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitFile_hashtag(Yarn.Compiler.YarnSpinnerV1Parser.File_hashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.file_hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitNode(Yarn.Compiler.YarnSpinnerV1Parser.NodeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.node"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitHeader(Yarn.Compiler.YarnSpinnerV1Parser.HeaderContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.header"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitBody(Yarn.Compiler.YarnSpinnerV1Parser.BodyContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.body"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitStatement(Yarn.Compiler.YarnSpinnerV1Parser.StatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitLine_statement(Yarn.Compiler.YarnSpinnerV1Parser.Line_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitLine_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Line_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitFormat_function(Yarn.Compiler.YarnSpinnerV1Parser.Format_functionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.format_function"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitKeyValuePairNamed(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNamedContext)">
            <summary>
            Visit a parse tree produced by the <c>KeyValuePairNamed</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitKeyValuePairNumber(Yarn.Compiler.YarnSpinnerV1Parser.KeyValuePairNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>KeyValuePairNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.key_value_pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitHashtag(Yarn.Compiler.YarnSpinnerV1Parser.HashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitLine_condition(Yarn.Compiler.YarnSpinnerV1Parser.Line_conditionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.line_condition"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpParens(Yarn.Compiler.YarnSpinnerV1Parser.ExpParensContext)">
            <summary>
            Visit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpMultDivMod(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModContext)">
            <summary>
            Visit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpMultDivModEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpMultDivModEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>expMultDivModEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpComparison(Yarn.Compiler.YarnSpinnerV1Parser.ExpComparisonContext)">
            <summary>
            Visit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpNegative(Yarn.Compiler.YarnSpinnerV1Parser.ExpNegativeContext)">
            <summary>
            Visit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpAndOrXor(Yarn.Compiler.YarnSpinnerV1Parser.ExpAndOrXorContext)">
            <summary>
            Visit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpPlusMinusEquals(Yarn.Compiler.YarnSpinnerV1Parser.ExpPlusMinusEqualsContext)">
            <summary>
            Visit a parse tree produced by the <c>expPlusMinusEquals</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpAddSub(Yarn.Compiler.YarnSpinnerV1Parser.ExpAddSubContext)">
            <summary>
            Visit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpNot(Yarn.Compiler.YarnSpinnerV1Parser.ExpNotContext)">
            <summary>
            Visit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpValue(Yarn.Compiler.YarnSpinnerV1Parser.ExpValueContext)">
            <summary>
            Visit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitExpEquality(Yarn.Compiler.YarnSpinnerV1Parser.ExpEqualityContext)">
            <summary>
            Visit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitValueNumber(Yarn.Compiler.YarnSpinnerV1Parser.ValueNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitValueTrue(Yarn.Compiler.YarnSpinnerV1Parser.ValueTrueContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitValueFalse(Yarn.Compiler.YarnSpinnerV1Parser.ValueFalseContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitValueVar(Yarn.Compiler.YarnSpinnerV1Parser.ValueVarContext)">
            <summary>
            Visit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitValueString(Yarn.Compiler.YarnSpinnerV1Parser.ValueStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitValueNull(Yarn.Compiler.YarnSpinnerV1Parser.ValueNullContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitValueFunc(Yarn.Compiler.YarnSpinnerV1Parser.ValueFuncContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitVariable(Yarn.Compiler.YarnSpinnerV1Parser.VariableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitFunction(Yarn.Compiler.YarnSpinnerV1Parser.FunctionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.function"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitIf_statement(Yarn.Compiler.YarnSpinnerV1Parser.If_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitIf_clause(Yarn.Compiler.YarnSpinnerV1Parser.If_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitElse_if_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_if_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitElse_clause(Yarn.Compiler.YarnSpinnerV1Parser.Else_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.else_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitSetVariableToValue(Yarn.Compiler.YarnSpinnerV1Parser.SetVariableToValueContext)">
            <summary>
            Visit a parse tree produced by the <c>setVariableToValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitSetExpression(Yarn.Compiler.YarnSpinnerV1Parser.SetExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>setExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitCall_statement(Yarn.Compiler.YarnSpinnerV1Parser.Call_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.call_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitCommand_statement(Yarn.Compiler.YarnSpinnerV1Parser.Command_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitCommand_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Command_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.command_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitShortcut_option_statement(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_option_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitShortcut_option(Yarn.Compiler.YarnSpinnerV1Parser.Shortcut_optionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.shortcut_option"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitOptionLink(Yarn.Compiler.YarnSpinnerV1Parser.OptionLinkContext)">
            <summary>
            Visit a parse tree produced by the <c>OptionLink</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitOptionJump(Yarn.Compiler.YarnSpinnerV1Parser.OptionJumpContext)">
            <summary>
            Visit a parse tree produced by the <c>OptionJump</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerV1ParserVisitor`1.VisitOption_formatted_text(Yarn.Compiler.YarnSpinnerV1Parser.Option_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerV1Parser.option_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:Yarn.Compiler.Utility">
            <summary>
            Utility methods for working with line tags.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Utility.GenerateYarnFileWithDeclarations(System.Collections.Generic.IEnumerable{Yarn.Compiler.Declaration},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generates a Yarn script that contains a node that declares
            variables.
            </summary>
            <remarks>This method is intended to be called by tools that let the
            user manage variable declarations. Such tools can read the existing
            variable declarations in from a script (by compiling the script with
            the <see cref="F:Yarn.Compiler.CompilationJob.CompilationType"/> value set to  <see
            cref="F:Yarn.Compiler.CompilationJob.Type.DeclarationsOnly"/>), allow the user to
            make changes, and then write the changes to disk by calling this
            method and saving the results.</remarks>
            <param name="declarations">The collection of <see
            cref="T:Yarn.Compiler.Declaration"/> objects to include in the output.</param>
            <param name="title">The title of the node that should be
            generated.</param>
            <param name="tags">The collection of tags that should be generated
            for the node. If this is <see langword="null"/>, no tags will be
            generated.</param>
            <param name="headers">The collection of additional headers that
            should be generated for the node. If this is <see langword="null"/>,
            no additional headers will be generated.</param>
            <returns>A string containing a Yarn script that declares the
            specified variables.</returns>
            <throws cref="T:System.ArgumentOutOfRangeException">Thrown when any of the
            <see cref="T:Yarn.Compiler.Declaration"/> objects in <paramref name="declarations"/>
            is not a variable declaration, or if the <see
            cref="P:Yarn.Compiler.Declaration.Type"/> of any of the declarations is an
            invalid value.</throws>
        </member>
        <member name="M:Yarn.Compiler.Utility.AddTagsToLines(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Given Yarn source code, adds line tags to the ends of all lines
            that need one and do not already have one.
            </summary>
            <remarks><para>
            This method ensures that it does not generate line
            tags that are already present in the file, or present in the
            <paramref name="existingLineTags"/> collection.
            </para>
            <para>
            Line tags are added to any line of source code that contains
            user-visible text: lines, options, and shortcut options.
            </para>
            </remarks>
            <param name="contents">The source code to add line tags
            to.</param>
            <param name="existingLineTags">The collection of line tags
            already exist elsewhere in the source code; the newly added
            line tags will not be duplicates of any in this
            collection.</param>
            <returns>The modified source code, with line tags
            added.</returns>
        </member>
        <member name="M:Yarn.Compiler.Utility.TagLines(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Given Yarn source code, adds line tags to the ends of all lines
            that need one and do not already have one.
            </summary>
            <remarks><para>
            This method ensures that it does not generate line
            tags that are already present in the file, or present in the
            <paramref name="existingLineTags"/> collection.
            </para>
            <para>
            Line tags are added to any line of source code that contains
            user-visible text: lines, options, and shortcut options.
            </para>
            </remarks>
            <param name="contents">The source code to add line tags
            to.</param>
            <param name="existingLineTags">The collection of line tags
            already exist elsewhere in the source code; the newly added
            line tags will not be duplicates of any in this
            collection.</param>
            <returns>Tuple of the modified source code, with line tags
            added and the list of new line tags generated.
            </returns>
        </member>
        <member name="M:Yarn.Compiler.Utility.ParseSource(System.String)">
            <summary>
            Parses a string of Yarn source code, and produces a FileParseResult
            and (if there were any problems) a collection of diagnostics.
            </summary>
            <param name="source">The source code to parse.</param>
            <returns>A tuple containing a <see cref="T:Yarn.Compiler.FileParseResult"/> that
            stores the parse tree and tokens, and a collection of <see
            cref="T:Yarn.Compiler.Diagnostic"/> objects that describe problems in the source
            code.</returns>
        </member>
        <member name="M:Yarn.Compiler.Utility.GenerateString(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Generates a new unique line tag that is not present in
            <c>existingKeys</c>.
            </summary>
            <param name="existingKeys">The collection of keys that should be
            considered when generating a new, unique line tag.</param>
            <returns>A unique line tag that is not already present in <paramref
            name="existingKeys"/>.</returns>
        </member>
        <member name="T:Yarn.Compiler.Utility.UntaggedLineListener">
            <summary>
            An <see cref="T:Yarn.Compiler.IYarnSpinnerParserListener"/> that produces line tags.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.Utility.UntaggedLineListener.#ctor(System.Collections.Generic.IList{System.String},Antlr4.Runtime.CommonTokenStream)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Yarn.Compiler.Utility.UntaggedLineListener"/> class.
            </summary>
            <param name="existingStrings">A collection of line IDs that
            should not be used. This list will be added to as this instance
            works.</param>
            <param name="tokenStream">The token stream used to generate the
            <see cref="T:Antlr4.Runtime.Tree.IParseTree"/> this instance is operating on.</param>
        </member>
        <member name="M:Yarn.Compiler.Utility.UntaggedLineListener.ExitLine_statement(Yarn.Compiler.YarnSpinnerParser.Line_statementContext)">
            <inheritdoc/>
        </member>
        <member name="M:Yarn.Compiler.Utility.UntaggedLineListener.IndexOfPreviousTokenOnChannel(Antlr4.Runtime.CommonTokenStream,System.Int32,System.Int32)">
            <summary>
            Gets the index of the first token to the left of the token at
            <paramref name="index"/> that's on <paramref name="channel"/>.
            If there are no tokens that match, return -1.
            </summary>
            <param name="tokenStream">The token stream to search
            within.</param>
            <param name="index">The index of the token to start searching
            from.</param>
            <param name="channel">The channel to find tokens on.</param>
            <returns>The index of the first token before the token at
            <paramref name="index"/> that is on the channel <paramref
            name="channel"/>. If none is found, returns -1. If <paramref
            name="index"/> is beyond the size of <paramref
            name="tokenStream"/>, returns the index of the last token in the
            stream.</returns>
        </member>
        <member name="M:Yarn.Compiler.Utility.DetermineNodeConnections(System.String[])">
            <summary>
            Finds and collates every jump in every node.
            </summary>
            <param name="YarnFileContents">The collection of yarn file content to parse and walk</param>
            <returns>A list of lists of GraphingNode each containing a node, its jumps, and any positional info.</returns>
        </member>
        <member name="T:Yarn.Compiler.InstructionCollectionExtensions">
            <summary>
            Contains extension methods for producing <see cref="T:Yarn.Compiler.BasicBlock"/>
            objects from a Node.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.InstructionCollectionExtensions.GetBasicBlocks(Yarn.Node)">
            <summary>
            Produces <see cref="T:Yarn.Compiler.BasicBlock"/> objects from a Node.
            </summary>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock">
            <summary>
            A basic block is a run of instructions inside a Node. Basic blocks group
            instructions up into segments such that execution only ever begins at
            the start of a block (that is, a program never jumps into the middle of
            a block), and execution only ever leaves at the end of a block.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.LabelName">
            <summary>
            Gets the name of the label that this block begins at, or null if this basic block does not begin at a labelled instruction.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.NodeName">
            <summary>
            Gets the name of the node that this block is in.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.FirstInstructionIndex">
            <summary>
            Gets the index of the first instruction of the node that this block is in.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Name">
            <summary>
            Gets a descriptive name for the block.
            </summary>
            <remarks>
            If this block begins at a labelled instruction, the name will be <c>[NodeName].[LabelName]</c>. Otherwise, it will be <c>[NodeName].[FirstInstructionIndex]</c>.
            </remarks>
        </member>
        <member name="M:Yarn.Compiler.BasicBlock.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Ancestors">
            <summary>
            Get the ancestors of this block - that is, blocks that may run immediately before this block.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Destinations">
            <summary>
            Gets the destinations of this block - that is, blocks or nodes that
            may run immediately after this block.
            </summary>
            <seealso cref="T:Yarn.Compiler.BasicBlock.Destination"/>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Instructions">
            <summary>
            Gets the Instructions that form this block.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.BasicBlock.AddDestination(Yarn.Compiler.BasicBlock,Yarn.Compiler.BasicBlock.Condition)">
            <summary>
            Adds a new destination to this block, that points to another block.
            </summary>
            <param name="descendant">The new descendant node.</param>
            <param name="condition">The condition under which <paramref
            name="descendant"/> will be run.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when descendant is
            <see langword="null"/>.</exception>
        </member>
        <member name="M:Yarn.Compiler.BasicBlock.AddDestination(System.String,Yarn.Compiler.BasicBlock.Condition)">
            <summary>
            Adds a new destination to this block, that points to a node.
            </summary>
            <param name="nodeName">The name of the destination node.</param>
            <param name="condition">The condition under which <paramref
            name="descendant"/> will be run.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref
            name="nodeName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.Destination">
            <summary>
            A destination represents a <see cref="T:Yarn.Compiler.BasicBlock"/> or node that may
            be run, following the execution of a <see cref="T:Yarn.Compiler.BasicBlock"/>.
            </summary>
            <remarks>
            Destination objects represent links between blocks, or between
            blocks and nodes.
            </remarks>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.Destination.DestinationType">
            <summary>
            The type of a Destination.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Destination.Type">
            <summary>
            Gets the Destination's type - whether the destination is a
            block, or a node.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Destination.NodeName">
            <summary>
            The name of the node that this destination refers to.
            </summary>
            <remarks>This value is only valid when <see cref="P:Yarn.Compiler.BasicBlock.Destination.Type"/> is
            <see cref="F:Yarn.Compiler.BasicBlock.Destination.DestinationType.Node"/>.</remarks>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Destination.Block">
            <summary>
            The block that this destination refers to.
            </summary>
            <remarks>This value is only valid when <see cref="P:Yarn.Compiler.BasicBlock.Destination.Type"/> is
            <see cref="F:Yarn.Compiler.BasicBlock.Destination.DestinationType.Block"/>.</remarks>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Destination.Condition">
            <summary>
            The condition that causes this destination to be reached.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.Descendants">
            <summary>
            Gets all descendants (that is, destinations, and destinations of
            those destinations, and so on), recursively.
            </summary>
            <remarks>
            Cycles are detected and avoided.
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.DescendantsWithPlayerVisibleContent">
            <summary>
            Gets all descendants (that is, destinations, and destinations of
            those destinations, and so on) that have any player-visible content,
            recursively.
            </summary>
            <remarks>
            Cycles are detected and avoided.
            </remarks>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.Condition">
            <summary>
            The conditions under which a <see cref="T:Yarn.Compiler.BasicBlock.Destination"/> may be
            reached at the end of a BasicBlock.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.Condition.Fallthrough">
            <summary>
            The Destination is reached because the preceding BasicBlock
            reached the end of its execution, and the Destination's target
            is the block immediately following.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.Condition.DirectJump">
            <summary>
            The Destination is reached beacuse of an explicit instruction to
            go to this block.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.Condition.ExpressionIsTrue">
            <summary>
            The Destination is reached because an expression evaluated to
            true.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.Condition.ExpressionIsFalse">
            <summary>
            The Destination is reached because an expression evaluated to
            false.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.Condition.Option">
            <summary>
            The Destination is reached because the player made an in-game
            choice to go to it.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.PlayerVisibleContentElement">
            <summary>
            An abstract class that represents some content that is shown to the
            player.
            </summary>
            <remarks>
            This class is used, rather than the runtime classes Yarn.Line or
            Yarn.OptionSet, because when the program is being analysed, no
            values for any substitutions are available. Instead, these classes
            represent the data that is available offline.
            </remarks>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.LineElement">
            <summary>
            A line of dialogue that should be shown to the player.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.LineElement.LineID">
            <summary>
            The string table ID of the line that will be shown to the player.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.OptionsElement">
            <summary>
            A collection of options that should be shown to the player.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.OptionsElement.Option">
            <summary>
            Represents a single option that may be presented to the player.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.OptionsElement.Option.LineID">
            <summary>
            The string table ID that will be shown to the player.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.OptionsElement.Option.Destination">
            <summary>
            The destination that will be run if this option is selected
            by the player.
            </summary>
            <remarks>
            This will be the name of a label, or the name of a node.
            </remarks>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.OptionsElement.Options">
            <summary>
            The collection of options that will be delivered to the player.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.BasicBlock.CommandElement">
            <summary>
            A command that will be executed.
            </summary>
        </member>
        <member name="F:Yarn.Compiler.BasicBlock.CommandElement.CommandText">
            <summary>
            The text of the command.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.BasicBlock.PlayerVisibleContent">
            <summary>
            Gets the collection of player-visible content that will be delivered
            when this block is run.
            </summary>
            <remarks>
            <para>
            Player-visible content means lines, options and commands. When this
            block is run, the entire contents of this collection will be
            displayed to the player, in the same order as they appear in this
            collection.
            </para>
            <para>
            If this collection is empty, then the block contains no visible
            content. This is the case for blocks that only contain logic, and do
            not contain any lines, options or commands.
            </para>
            <example>
            To tell the difference between the different kinds of content, use
            the <see langword="is"/> operator to check the type of each item:
            <code>
            foreach (var item in block.PlayerVisibleContent) { if (item is
            LineElement line) { // Do something with line } }
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Yarn.Compiler.YarnSpinnerParser.ExpressionContext.Type">
            <summary>
            Gets or sets the type that this expression has been
            determined to be by a <see cref="T:Yarn.Compiler.TypeCheckVisitor"/>
            object.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.YarnSpinnerParser.ExpressionContext.Hint">
            <summary>
            Gets or sets a type hint for the expression.
            This is mostly used by <see cref="T:Yarn.Compiler.TypeCheckVisitor"/>
            to give a hint that can be used by functions to
            influence their type when set to use inference.
            Won't be used if a concrete type is already known.
            </summary>
        </member>
        <member name="P:Yarn.Compiler.YarnSpinnerParser.ValueContext.Hint">
            <summary>
            Gets or sets a type hint for the expression.
            This is mostly used by <see cref="T:Yarn.Compiler.TypeCheckVisitor"/>
            to give a hint that can be used by functions to
            influence their type when set to use inference.
            Won't be used if a concrete type is already known.
            </summary>
        </member>
        <member name="T:Yarn.Compiler.YarnSpinnerParserBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:Yarn.Compiler.IYarnSpinnerParserListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterDialogue(Yarn.Compiler.YarnSpinnerParser.DialogueContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.dialogue"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitDialogue(Yarn.Compiler.YarnSpinnerParser.DialogueContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.dialogue"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterFile_hashtag(Yarn.Compiler.YarnSpinnerParser.File_hashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.file_hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitFile_hashtag(Yarn.Compiler.YarnSpinnerParser.File_hashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.file_hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.node"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.node"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterHeader(Yarn.Compiler.YarnSpinnerParser.HeaderContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.header"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitHeader(Yarn.Compiler.YarnSpinnerParser.HeaderContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.header"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.body"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.body"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterStatement(Yarn.Compiler.YarnSpinnerParser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitStatement(Yarn.Compiler.YarnSpinnerParser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterLine_statement(Yarn.Compiler.YarnSpinnerParser.Line_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitLine_statement(Yarn.Compiler.YarnSpinnerParser.Line_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterLine_formatted_text(Yarn.Compiler.YarnSpinnerParser.Line_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitLine_formatted_text(Yarn.Compiler.YarnSpinnerParser.Line_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterHashtag(Yarn.Compiler.YarnSpinnerParser.HashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitHashtag(Yarn.Compiler.YarnSpinnerParser.HashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.hashtag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterLine_condition(Yarn.Compiler.YarnSpinnerParser.Line_conditionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_condition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitLine_condition(Yarn.Compiler.YarnSpinnerParser.Line_conditionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_condition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpParens(Yarn.Compiler.YarnSpinnerParser.ExpParensContext)">
            <summary>
            Enter a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpParens(Yarn.Compiler.YarnSpinnerParser.ExpParensContext)">
            <summary>
            Exit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpMultDivMod(Yarn.Compiler.YarnSpinnerParser.ExpMultDivModContext)">
            <summary>
            Enter a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpMultDivMod(Yarn.Compiler.YarnSpinnerParser.ExpMultDivModContext)">
            <summary>
            Exit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpComparison(Yarn.Compiler.YarnSpinnerParser.ExpComparisonContext)">
            <summary>
            Enter a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpComparison(Yarn.Compiler.YarnSpinnerParser.ExpComparisonContext)">
            <summary>
            Exit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpNegative(Yarn.Compiler.YarnSpinnerParser.ExpNegativeContext)">
            <summary>
            Enter a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpNegative(Yarn.Compiler.YarnSpinnerParser.ExpNegativeContext)">
            <summary>
            Exit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpAndOrXor(Yarn.Compiler.YarnSpinnerParser.ExpAndOrXorContext)">
            <summary>
            Enter a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpAndOrXor(Yarn.Compiler.YarnSpinnerParser.ExpAndOrXorContext)">
            <summary>
            Exit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpAddSub(Yarn.Compiler.YarnSpinnerParser.ExpAddSubContext)">
            <summary>
            Enter a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpAddSub(Yarn.Compiler.YarnSpinnerParser.ExpAddSubContext)">
            <summary>
            Exit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpNot(Yarn.Compiler.YarnSpinnerParser.ExpNotContext)">
            <summary>
            Enter a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpNot(Yarn.Compiler.YarnSpinnerParser.ExpNotContext)">
            <summary>
            Exit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpValue(Yarn.Compiler.YarnSpinnerParser.ExpValueContext)">
            <summary>
            Enter a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpValue(Yarn.Compiler.YarnSpinnerParser.ExpValueContext)">
            <summary>
            Exit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterExpEquality(Yarn.Compiler.YarnSpinnerParser.ExpEqualityContext)">
            <summary>
            Enter a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitExpEquality(Yarn.Compiler.YarnSpinnerParser.ExpEqualityContext)">
            <summary>
            Exit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterValueNumber(Yarn.Compiler.YarnSpinnerParser.ValueNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitValueNumber(Yarn.Compiler.YarnSpinnerParser.ValueNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterValueTrue(Yarn.Compiler.YarnSpinnerParser.ValueTrueContext)">
            <summary>
            Enter a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitValueTrue(Yarn.Compiler.YarnSpinnerParser.ValueTrueContext)">
            <summary>
            Exit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterValueFalse(Yarn.Compiler.YarnSpinnerParser.ValueFalseContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitValueFalse(Yarn.Compiler.YarnSpinnerParser.ValueFalseContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterValueVar(Yarn.Compiler.YarnSpinnerParser.ValueVarContext)">
            <summary>
            Enter a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitValueVar(Yarn.Compiler.YarnSpinnerParser.ValueVarContext)">
            <summary>
            Exit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterValueString(Yarn.Compiler.YarnSpinnerParser.ValueStringContext)">
            <summary>
            Enter a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitValueString(Yarn.Compiler.YarnSpinnerParser.ValueStringContext)">
            <summary>
            Exit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterValueNull(Yarn.Compiler.YarnSpinnerParser.ValueNullContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitValueNull(Yarn.Compiler.YarnSpinnerParser.ValueNullContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterValueFunc(Yarn.Compiler.YarnSpinnerParser.ValueFuncContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitValueFunc(Yarn.Compiler.YarnSpinnerParser.ValueFuncContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterVariable(Yarn.Compiler.YarnSpinnerParser.VariableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.variable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitVariable(Yarn.Compiler.YarnSpinnerParser.VariableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.variable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterFunction_call(Yarn.Compiler.YarnSpinnerParser.Function_callContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.function_call"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitFunction_call(Yarn.Compiler.YarnSpinnerParser.Function_callContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.function_call"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterIf_statement(Yarn.Compiler.YarnSpinnerParser.If_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitIf_statement(Yarn.Compiler.YarnSpinnerParser.If_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterIf_clause(Yarn.Compiler.YarnSpinnerParser.If_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitIf_clause(Yarn.Compiler.YarnSpinnerParser.If_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterElse_if_clause(Yarn.Compiler.YarnSpinnerParser.Else_if_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitElse_if_clause(Yarn.Compiler.YarnSpinnerParser.Else_if_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_if_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterElse_clause(Yarn.Compiler.YarnSpinnerParser.Else_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitElse_clause(Yarn.Compiler.YarnSpinnerParser.Else_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_clause"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterSet_statement(Yarn.Compiler.YarnSpinnerParser.Set_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.set_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitSet_statement(Yarn.Compiler.YarnSpinnerParser.Set_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.set_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterCall_statement(Yarn.Compiler.YarnSpinnerParser.Call_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.call_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitCall_statement(Yarn.Compiler.YarnSpinnerParser.Call_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.call_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterCommand_statement(Yarn.Compiler.YarnSpinnerParser.Command_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitCommand_statement(Yarn.Compiler.YarnSpinnerParser.Command_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterCommand_formatted_text(Yarn.Compiler.YarnSpinnerParser.Command_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitCommand_formatted_text(Yarn.Compiler.YarnSpinnerParser.Command_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_formatted_text"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterShortcut_option_statement(Yarn.Compiler.YarnSpinnerParser.Shortcut_option_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitShortcut_option_statement(Yarn.Compiler.YarnSpinnerParser.Shortcut_option_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterShortcut_option(Yarn.Compiler.YarnSpinnerParser.Shortcut_optionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitShortcut_option(Yarn.Compiler.YarnSpinnerParser.Shortcut_optionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterDeclare_statement(Yarn.Compiler.YarnSpinnerParser.Declare_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.declare_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitDeclare_statement(Yarn.Compiler.YarnSpinnerParser.Declare_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.declare_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterJumpToNodeName(Yarn.Compiler.YarnSpinnerParser.JumpToNodeNameContext)">
            <summary>
            Enter a parse tree produced by the <c>jumpToNodeName</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitJumpToNodeName(Yarn.Compiler.YarnSpinnerParser.JumpToNodeNameContext)">
            <summary>
            Exit a parse tree produced by the <c>jumpToNodeName</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterJumpToExpression(Yarn.Compiler.YarnSpinnerParser.JumpToExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>jumpToExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitJumpToExpression(Yarn.Compiler.YarnSpinnerParser.JumpToExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>jumpToExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:Yarn.Compiler.IYarnSpinnerParserVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitDialogue(Yarn.Compiler.YarnSpinnerParser.DialogueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.dialogue"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitFile_hashtag(Yarn.Compiler.YarnSpinnerParser.File_hashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.file_hashtag"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.node"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitHeader(Yarn.Compiler.YarnSpinnerParser.HeaderContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.header"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.body"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitStatement(Yarn.Compiler.YarnSpinnerParser.StatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitLine_statement(Yarn.Compiler.YarnSpinnerParser.Line_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitLine_formatted_text(Yarn.Compiler.YarnSpinnerParser.Line_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_formatted_text"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitHashtag(Yarn.Compiler.YarnSpinnerParser.HashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.hashtag"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitLine_condition(Yarn.Compiler.YarnSpinnerParser.Line_conditionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_condition"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpParens(Yarn.Compiler.YarnSpinnerParser.ExpParensContext)">
            <summary>
            Visit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpMultDivMod(Yarn.Compiler.YarnSpinnerParser.ExpMultDivModContext)">
            <summary>
            Visit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpComparison(Yarn.Compiler.YarnSpinnerParser.ExpComparisonContext)">
            <summary>
            Visit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpNegative(Yarn.Compiler.YarnSpinnerParser.ExpNegativeContext)">
            <summary>
            Visit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpAndOrXor(Yarn.Compiler.YarnSpinnerParser.ExpAndOrXorContext)">
            <summary>
            Visit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpAddSub(Yarn.Compiler.YarnSpinnerParser.ExpAddSubContext)">
            <summary>
            Visit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpNot(Yarn.Compiler.YarnSpinnerParser.ExpNotContext)">
            <summary>
            Visit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpValue(Yarn.Compiler.YarnSpinnerParser.ExpValueContext)">
            <summary>
            Visit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitExpEquality(Yarn.Compiler.YarnSpinnerParser.ExpEqualityContext)">
            <summary>
            Visit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitValueNumber(Yarn.Compiler.YarnSpinnerParser.ValueNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitValueTrue(Yarn.Compiler.YarnSpinnerParser.ValueTrueContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitValueFalse(Yarn.Compiler.YarnSpinnerParser.ValueFalseContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitValueVar(Yarn.Compiler.YarnSpinnerParser.ValueVarContext)">
            <summary>
            Visit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitValueString(Yarn.Compiler.YarnSpinnerParser.ValueStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitValueNull(Yarn.Compiler.YarnSpinnerParser.ValueNullContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitValueFunc(Yarn.Compiler.YarnSpinnerParser.ValueFuncContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitVariable(Yarn.Compiler.YarnSpinnerParser.VariableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.variable"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitFunction_call(Yarn.Compiler.YarnSpinnerParser.Function_callContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.function_call"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitIf_statement(Yarn.Compiler.YarnSpinnerParser.If_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitIf_clause(Yarn.Compiler.YarnSpinnerParser.If_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_clause"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitElse_if_clause(Yarn.Compiler.YarnSpinnerParser.Else_if_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_if_clause"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitElse_clause(Yarn.Compiler.YarnSpinnerParser.Else_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_clause"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitSet_statement(Yarn.Compiler.YarnSpinnerParser.Set_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.set_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitCall_statement(Yarn.Compiler.YarnSpinnerParser.Call_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.call_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitCommand_statement(Yarn.Compiler.YarnSpinnerParser.Command_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitCommand_formatted_text(Yarn.Compiler.YarnSpinnerParser.Command_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_formatted_text"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitShortcut_option_statement(Yarn.Compiler.YarnSpinnerParser.Shortcut_option_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitShortcut_option(Yarn.Compiler.YarnSpinnerParser.Shortcut_optionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitDeclare_statement(Yarn.Compiler.YarnSpinnerParser.Declare_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.declare_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitJumpToNodeName(Yarn.Compiler.YarnSpinnerParser.JumpToNodeNameContext)">
            <summary>
            Visit a parse tree produced by the <c>jumpToNodeName</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.YarnSpinnerParserBaseVisitor`1.VisitJumpToExpression(Yarn.Compiler.YarnSpinnerParser.JumpToExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>jumpToExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.ParserRuleContextExtension.GetTextWithWhitespace(Antlr4.Runtime.ParserRuleContext)">
            <summary>
            Returns the original text of this <see cref="T:Yarn.Compiler.YarnSpinnerParser.ExpressionContext"/>, including all
            whitespace, comments, and other information that the parser
            would otherwise not include.
            </summary>
            <returns>The original text of this expression.</returns>
        </member>
        <member name="T:Yarn.Compiler.IYarnSpinnerParserListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:Yarn.Compiler.YarnSpinnerParser"/>.
            </summary>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterDialogue(Yarn.Compiler.YarnSpinnerParser.DialogueContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.dialogue"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitDialogue(Yarn.Compiler.YarnSpinnerParser.DialogueContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.dialogue"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterFile_hashtag(Yarn.Compiler.YarnSpinnerParser.File_hashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.file_hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitFile_hashtag(Yarn.Compiler.YarnSpinnerParser.File_hashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.file_hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.node"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.node"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterHeader(Yarn.Compiler.YarnSpinnerParser.HeaderContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.header"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitHeader(Yarn.Compiler.YarnSpinnerParser.HeaderContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.header"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.body"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.body"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterStatement(Yarn.Compiler.YarnSpinnerParser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitStatement(Yarn.Compiler.YarnSpinnerParser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterLine_statement(Yarn.Compiler.YarnSpinnerParser.Line_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitLine_statement(Yarn.Compiler.YarnSpinnerParser.Line_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterLine_formatted_text(Yarn.Compiler.YarnSpinnerParser.Line_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitLine_formatted_text(Yarn.Compiler.YarnSpinnerParser.Line_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterHashtag(Yarn.Compiler.YarnSpinnerParser.HashtagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitHashtag(Yarn.Compiler.YarnSpinnerParser.HashtagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterLine_condition(Yarn.Compiler.YarnSpinnerParser.Line_conditionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_condition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitLine_condition(Yarn.Compiler.YarnSpinnerParser.Line_conditionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_condition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpParens(Yarn.Compiler.YarnSpinnerParser.ExpParensContext)">
            <summary>
            Enter a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpParens(Yarn.Compiler.YarnSpinnerParser.ExpParensContext)">
            <summary>
            Exit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpMultDivMod(Yarn.Compiler.YarnSpinnerParser.ExpMultDivModContext)">
            <summary>
            Enter a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpMultDivMod(Yarn.Compiler.YarnSpinnerParser.ExpMultDivModContext)">
            <summary>
            Exit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpComparison(Yarn.Compiler.YarnSpinnerParser.ExpComparisonContext)">
            <summary>
            Enter a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpComparison(Yarn.Compiler.YarnSpinnerParser.ExpComparisonContext)">
            <summary>
            Exit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpNegative(Yarn.Compiler.YarnSpinnerParser.ExpNegativeContext)">
            <summary>
            Enter a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpNegative(Yarn.Compiler.YarnSpinnerParser.ExpNegativeContext)">
            <summary>
            Exit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpAndOrXor(Yarn.Compiler.YarnSpinnerParser.ExpAndOrXorContext)">
            <summary>
            Enter a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpAndOrXor(Yarn.Compiler.YarnSpinnerParser.ExpAndOrXorContext)">
            <summary>
            Exit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpAddSub(Yarn.Compiler.YarnSpinnerParser.ExpAddSubContext)">
            <summary>
            Enter a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpAddSub(Yarn.Compiler.YarnSpinnerParser.ExpAddSubContext)">
            <summary>
            Exit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpNot(Yarn.Compiler.YarnSpinnerParser.ExpNotContext)">
            <summary>
            Enter a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpNot(Yarn.Compiler.YarnSpinnerParser.ExpNotContext)">
            <summary>
            Exit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpValue(Yarn.Compiler.YarnSpinnerParser.ExpValueContext)">
            <summary>
            Enter a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpValue(Yarn.Compiler.YarnSpinnerParser.ExpValueContext)">
            <summary>
            Exit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterExpEquality(Yarn.Compiler.YarnSpinnerParser.ExpEqualityContext)">
            <summary>
            Enter a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitExpEquality(Yarn.Compiler.YarnSpinnerParser.ExpEqualityContext)">
            <summary>
            Exit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterValueNumber(Yarn.Compiler.YarnSpinnerParser.ValueNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitValueNumber(Yarn.Compiler.YarnSpinnerParser.ValueNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterValueTrue(Yarn.Compiler.YarnSpinnerParser.ValueTrueContext)">
            <summary>
            Enter a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitValueTrue(Yarn.Compiler.YarnSpinnerParser.ValueTrueContext)">
            <summary>
            Exit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterValueFalse(Yarn.Compiler.YarnSpinnerParser.ValueFalseContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitValueFalse(Yarn.Compiler.YarnSpinnerParser.ValueFalseContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterValueVar(Yarn.Compiler.YarnSpinnerParser.ValueVarContext)">
            <summary>
            Enter a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitValueVar(Yarn.Compiler.YarnSpinnerParser.ValueVarContext)">
            <summary>
            Exit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterValueString(Yarn.Compiler.YarnSpinnerParser.ValueStringContext)">
            <summary>
            Enter a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitValueString(Yarn.Compiler.YarnSpinnerParser.ValueStringContext)">
            <summary>
            Exit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterValueNull(Yarn.Compiler.YarnSpinnerParser.ValueNullContext)">
            <summary>
            Enter a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitValueNull(Yarn.Compiler.YarnSpinnerParser.ValueNullContext)">
            <summary>
            Exit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterValueFunc(Yarn.Compiler.YarnSpinnerParser.ValueFuncContext)">
            <summary>
            Enter a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitValueFunc(Yarn.Compiler.YarnSpinnerParser.ValueFuncContext)">
            <summary>
            Exit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterVariable(Yarn.Compiler.YarnSpinnerParser.VariableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitVariable(Yarn.Compiler.YarnSpinnerParser.VariableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterFunction_call(Yarn.Compiler.YarnSpinnerParser.Function_callContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.function_call"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitFunction_call(Yarn.Compiler.YarnSpinnerParser.Function_callContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.function_call"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterIf_statement(Yarn.Compiler.YarnSpinnerParser.If_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitIf_statement(Yarn.Compiler.YarnSpinnerParser.If_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterIf_clause(Yarn.Compiler.YarnSpinnerParser.If_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitIf_clause(Yarn.Compiler.YarnSpinnerParser.If_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterElse_if_clause(Yarn.Compiler.YarnSpinnerParser.Else_if_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitElse_if_clause(Yarn.Compiler.YarnSpinnerParser.Else_if_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterElse_clause(Yarn.Compiler.YarnSpinnerParser.Else_clauseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitElse_clause(Yarn.Compiler.YarnSpinnerParser.Else_clauseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterSet_statement(Yarn.Compiler.YarnSpinnerParser.Set_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitSet_statement(Yarn.Compiler.YarnSpinnerParser.Set_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterCall_statement(Yarn.Compiler.YarnSpinnerParser.Call_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.call_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitCall_statement(Yarn.Compiler.YarnSpinnerParser.Call_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.call_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterCommand_statement(Yarn.Compiler.YarnSpinnerParser.Command_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitCommand_statement(Yarn.Compiler.YarnSpinnerParser.Command_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterCommand_formatted_text(Yarn.Compiler.YarnSpinnerParser.Command_formatted_textContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitCommand_formatted_text(Yarn.Compiler.YarnSpinnerParser.Command_formatted_textContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterShortcut_option_statement(Yarn.Compiler.YarnSpinnerParser.Shortcut_option_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitShortcut_option_statement(Yarn.Compiler.YarnSpinnerParser.Shortcut_option_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterShortcut_option(Yarn.Compiler.YarnSpinnerParser.Shortcut_optionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitShortcut_option(Yarn.Compiler.YarnSpinnerParser.Shortcut_optionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterDeclare_statement(Yarn.Compiler.YarnSpinnerParser.Declare_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.declare_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitDeclare_statement(Yarn.Compiler.YarnSpinnerParser.Declare_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.declare_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterJumpToNodeName(Yarn.Compiler.YarnSpinnerParser.JumpToNodeNameContext)">
            <summary>
            Enter a parse tree produced by the <c>jumpToNodeName</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitJumpToNodeName(Yarn.Compiler.YarnSpinnerParser.JumpToNodeNameContext)">
            <summary>
            Exit a parse tree produced by the <c>jumpToNodeName</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.EnterJumpToExpression(Yarn.Compiler.YarnSpinnerParser.JumpToExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>jumpToExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserListener.ExitJumpToExpression(Yarn.Compiler.YarnSpinnerParser.JumpToExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>jumpToExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:Yarn.Compiler.IYarnSpinnerParserVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:Yarn.Compiler.YarnSpinnerParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitDialogue(Yarn.Compiler.YarnSpinnerParser.DialogueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.dialogue"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitFile_hashtag(Yarn.Compiler.YarnSpinnerParser.File_hashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.file_hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitNode(Yarn.Compiler.YarnSpinnerParser.NodeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.node"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitHeader(Yarn.Compiler.YarnSpinnerParser.HeaderContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.header"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitBody(Yarn.Compiler.YarnSpinnerParser.BodyContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.body"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitStatement(Yarn.Compiler.YarnSpinnerParser.StatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitLine_statement(Yarn.Compiler.YarnSpinnerParser.Line_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitLine_formatted_text(Yarn.Compiler.YarnSpinnerParser.Line_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitHashtag(Yarn.Compiler.YarnSpinnerParser.HashtagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.hashtag"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitLine_condition(Yarn.Compiler.YarnSpinnerParser.Line_conditionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.line_condition"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpParens(Yarn.Compiler.YarnSpinnerParser.ExpParensContext)">
            <summary>
            Visit a parse tree produced by the <c>expParens</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpMultDivMod(Yarn.Compiler.YarnSpinnerParser.ExpMultDivModContext)">
            <summary>
            Visit a parse tree produced by the <c>expMultDivMod</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpComparison(Yarn.Compiler.YarnSpinnerParser.ExpComparisonContext)">
            <summary>
            Visit a parse tree produced by the <c>expComparison</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpNegative(Yarn.Compiler.YarnSpinnerParser.ExpNegativeContext)">
            <summary>
            Visit a parse tree produced by the <c>expNegative</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpAndOrXor(Yarn.Compiler.YarnSpinnerParser.ExpAndOrXorContext)">
            <summary>
            Visit a parse tree produced by the <c>expAndOrXor</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpAddSub(Yarn.Compiler.YarnSpinnerParser.ExpAddSubContext)">
            <summary>
            Visit a parse tree produced by the <c>expAddSub</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpNot(Yarn.Compiler.YarnSpinnerParser.ExpNotContext)">
            <summary>
            Visit a parse tree produced by the <c>expNot</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpValue(Yarn.Compiler.YarnSpinnerParser.ExpValueContext)">
            <summary>
            Visit a parse tree produced by the <c>expValue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitExpEquality(Yarn.Compiler.YarnSpinnerParser.ExpEqualityContext)">
            <summary>
            Visit a parse tree produced by the <c>expEquality</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitValueNumber(Yarn.Compiler.YarnSpinnerParser.ValueNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitValueTrue(Yarn.Compiler.YarnSpinnerParser.ValueTrueContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitValueFalse(Yarn.Compiler.YarnSpinnerParser.ValueFalseContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitValueVar(Yarn.Compiler.YarnSpinnerParser.ValueVarContext)">
            <summary>
            Visit a parse tree produced by the <c>valueVar</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitValueString(Yarn.Compiler.YarnSpinnerParser.ValueStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitValueNull(Yarn.Compiler.YarnSpinnerParser.ValueNullContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitValueFunc(Yarn.Compiler.YarnSpinnerParser.ValueFuncContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFunc</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitVariable(Yarn.Compiler.YarnSpinnerParser.VariableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitFunction_call(Yarn.Compiler.YarnSpinnerParser.Function_callContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.function_call"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitIf_statement(Yarn.Compiler.YarnSpinnerParser.If_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitIf_clause(Yarn.Compiler.YarnSpinnerParser.If_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitElse_if_clause(Yarn.Compiler.YarnSpinnerParser.Else_if_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_if_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitElse_clause(Yarn.Compiler.YarnSpinnerParser.Else_clauseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.else_clause"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitSet_statement(Yarn.Compiler.YarnSpinnerParser.Set_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.set_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitCall_statement(Yarn.Compiler.YarnSpinnerParser.Call_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.call_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitCommand_statement(Yarn.Compiler.YarnSpinnerParser.Command_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitCommand_formatted_text(Yarn.Compiler.YarnSpinnerParser.Command_formatted_textContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.command_formatted_text"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitShortcut_option_statement(Yarn.Compiler.YarnSpinnerParser.Shortcut_option_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitShortcut_option(Yarn.Compiler.YarnSpinnerParser.Shortcut_optionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.shortcut_option"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitDeclare_statement(Yarn.Compiler.YarnSpinnerParser.Declare_statementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Yarn.Compiler.YarnSpinnerParser.declare_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitJumpToNodeName(Yarn.Compiler.YarnSpinnerParser.JumpToNodeNameContext)">
            <summary>
            Visit a parse tree produced by the <c>jumpToNodeName</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Yarn.Compiler.IYarnSpinnerParserVisitor`1.VisitJumpToExpression(Yarn.Compiler.YarnSpinnerParser.JumpToExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>jumpToExpression</c>
            labeled alternative in <see cref="M:Yarn.Compiler.YarnSpinnerParser.jump_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:ErrorStrategy.ReportNoViableAlternative(Antlr4.Runtime.Parser,Antlr4.Runtime.NoViableAltException)">
            <inheritdoc/>
        </member>
        <member name="M:ErrorStrategy.ReportInputMismatch(Antlr4.Runtime.Parser,Antlr4.Runtime.InputMismatchException)">
            <inheritdoc/>
        </member>
    </members>
</doc>
